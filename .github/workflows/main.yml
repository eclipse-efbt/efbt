name: BIRD Tests

on:
  push:
    branches-ignore:
      - main
      - master
jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        os: [windows-latest]
        python-version: [3.13]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }} (64-bit)
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        architecture: 'x64'  # Explicitly request 64-bit Python

    - name: Verify 64-bit environment
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "=== Environment Architecture Check ==="
        Write-Host "PowerShell Core Architecture: $([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture)"
        Write-Host "OS Architecture: $([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)"
        Write-Host "Is 64-bit Process: $([Environment]::Is64BitProcess)"
        Write-Host "Is 64-bit OS: $([Environment]::Is64BitOperatingSystem)"
        Write-Host "Processor Architecture: $env:PROCESSOR_ARCHITECTURE"
        Write-Host "Python path: $(Get-Command python).Path"

        # Verify we're in 64-bit
        if (-not [Environment]::Is64BitProcess) {
            throw "Not running in 64-bit mode!"
        }

    - name: Install Microsoft Access Database Engine 2016 x64 (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # Force 64-bit installation
        Write-Host "Installing Microsoft Access Database Engine 2016 x64..."

        # 64-bit installer URL
        $downloadUrl = "https://download.microsoft.com/download/3/5/C/35C84C36-661A-44E6-9324-8786B8DBE231/AccessDatabaseEngine_X64.exe"
        $installerPath = "$env:TEMP\AccessDatabaseEngine_X64.exe"

        Write-Host "Downloading 64-bit Access Database Engine..."

        # Download the installer
        Write-Host "Downloading Access Database Engine from Microsoft..."
        try {
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            Invoke-WebRequest -Uri $downloadUrl -OutFile $installerPath -UseBasicParsing
            Write-Host "Download completed successfully"
        } catch {
            Write-Host "Error downloading: $_"
            # Try alternative download method
            $webClient = New-Object System.Net.WebClient
            $webClient.DownloadFile($downloadUrl, $installerPath)
        }

        # Verify download
        if (Test-Path $installerPath) {
            $fileSize = (Get-Item $installerPath).Length
            Write-Host "Installer downloaded: $fileSize bytes"

            # Install silently
            Write-Host "Installing Access Database Engine silently..."
            $process = Start-Process -FilePath $installerPath -ArgumentList "/quiet", "/norestart", "ACCEPT=YES" -PassThru -Wait

            # Check exit code
            if ($process.ExitCode -eq 0) {
                Write-Host "Access Database Engine installed successfully"
            } else {
                Write-Host "Installation completed with exit code: $($process.ExitCode)"
            }

            # Verify installation by checking for ACE OLEDB provider
            Write-Host "Verifying installation..."
            $aceProvider = Get-ItemProperty "HKLM:\SOFTWARE\Classes\Microsoft.ACE.OLEDB.16.0" -ErrorAction SilentlyContinue
            if ($aceProvider) {
                Write-Host "ACE OLEDB 16.0 provider is registered"
            } else {
                Write-Host "Warning: ACE OLEDB provider not found in registry"
            }
        } else {
            Write-Host "Error: Installer file not found at $installerPath"
            exit 1
        }

    - name: Install SQLite (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "Installing SQLite for Windows..."
        $downloadUrl = "https://www.sqlite.org/2024/sqlite-tools-win-x64-3460000.zip"
        $zipPath = "$env:TEMP\sqlite-tools.zip"
        $extractPath = "$env:TEMP\sqlite-tools"
        
        try {
          # Download SQLite tools
          Write-Host "Downloading SQLite tools..."
          Invoke-WebRequest -Uri $downloadUrl -OutFile $zipPath -UseBasicParsing
          
          if (-not (Test-Path $zipPath)) {
            throw "Failed to download SQLite tools"
          }
          
          # Extract to temp folder
          Write-Host "Extracting SQLite tools..."
          Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force
          
          # List contents for debugging
          Write-Host "Contents of extracted folder:"
          Get-ChildItem -Path $extractPath -Recurse | ForEach-Object { Write-Host "  $($_.FullName)" }
          
          # Find sqlite3.exe (removed -Name parameter to get file objects)
          $sqliteExe = Get-ChildItem -Path $extractPath -Filter "sqlite3.exe" -Recurse | Select-Object -First 1
          
          if ($sqliteExe -and $sqliteExe.FullName) {
            $sourcePath = $sqliteExe.FullName
            Write-Host "Found sqlite3.exe at: $sourcePath"
            
            # Copy to system directory
            Copy-Item $sourcePath "C:\Windows\System32\sqlite3.exe" -Force
            Write-Host "SQLite installed successfully"
            
            # Verify installation
            $version = & sqlite3 -version
            Write-Host "SQLite version: $version"
          } else {
            throw "sqlite3.exe not found in downloaded package"
          }
        }
        catch {
          Write-Host "Error installing SQLite: $($_.Exception.Message)"
          exit 1
        }

    - name: Installation of uv
      uses: astral-sh/setup-uv@v1

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('birds_nest/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Setup environment
      shell: pwsh
      run: |
        cd birds_nest
        uv sync

    # - name: Run Core Feature Setup
    #   run: |
    #     cd birds_nest
    #     uv run pybirdai/standalone/run_core_pipeline.py
    #
    # - name: Run Core Feature Pipeline
    #   run: |
    #     cd birds_nest
    #     uv run pybirdai/standalone/run_core_pipeline.py

    # - name: Run Core Feature Setup
    #   run: |
    #     cd birds_nest
    #     uv run pybirdai/standalone/run_core_pipeline.py
    #
    # - name: Run Core Feature Pipeline
    #   run: |
    #     cd birds_nest
    #     uv run pybirdai/standalone/run_core_pipeline.py
    #
    # - name: Run Core Feature Setup
    #   run: |
    #     cd birds_nest
    #     uv run pybirdai/standalone/run_core_pipeline.py

    - name: Run DPM Feature Setup
      run: |
        cd birds_nest
        uv run pybirdai/standalone/run_dpm_pipeline_setup.py

    - name: Run DPM Feature pipelines
      shell: pwsh
      run: |
        # Verify we're still in 64-bit mode before running
        Write-Host "Running DPM pipeline in 64-bit mode: $([Environment]::Is64BitProcess)"
        cd birds_nest
        uv run pybirdai/standalone/run_dpm_pipeline_wo_setup.py
