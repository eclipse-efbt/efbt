name: BIRD Tests

on:
  push:
    branches-ignore:
      - main
      - master
  pull_request:
    branches:
      - develop

jobs:
  build-windows:
    name: "(windows-latest, python 3.13, x64, sqlite3)"
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13 (64-bit)
      uses: actions/setup-python@v3
      with:
        python-version: '3.13'
        architecture: 'x64'

    - name: Verify 64-bit environment
      shell: pwsh
      run: |
        Write-Host "=== Environment Architecture Check ==="
        Write-Host "PowerShell Core Architecture: $([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture)"
        Write-Host "OS Architecture: $([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)"
        Write-Host "Is 64-bit Process: $([Environment]::Is64BitProcess)"
        Write-Host "Is 64-bit OS: $([Environment]::Is64BitOperatingSystem)"
        Write-Host "Processor Architecture: $env:PROCESSOR_ARCHITECTURE"
        Write-Host "Python path: $(Get-Command python).Path"

        # Verify we're in 64-bit
        if (-not [Environment]::Is64BitProcess) {
            throw "Not running in 64-bit mode!"
        }

    - name: Install Microsoft Access Database Engine 2016 x64
      shell: pwsh
      run: |
        # Force 64-bit installation
        Write-Host "Installing Microsoft Access Database Engine 2016 x64..."

        # 64-bit installer URL
        $downloadUrl = "https://download.microsoft.com/download/3/5/C/35C84C36-661A-44E6-9324-8786B8DBE231/AccessDatabaseEngine_X64.exe"
        $installerPath = "$env:TEMP\AccessDatabaseEngine_X64.exe"

        # Check if installer was restored from cache
        if (Test-Path $installerPath) {
            Write-Host "✅ Access Database Engine installer found in cache"
            $fileSize = (Get-Item $installerPath).Length
            Write-Host "Cached installer size: $fileSize bytes"
        } else {
            Write-Host "⬇️ Downloading Access Database Engine from Microsoft..."
            # Download the installer
            try {
                [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                Invoke-WebRequest -Uri $downloadUrl -OutFile $installerPath -UseBasicParsing
                Write-Host "Download completed successfully"
            } catch {
                Write-Host "Error downloading: $_"
                # Try alternative download method
                $webClient = New-Object System.Net.WebClient
                $webClient.DownloadFile($downloadUrl, $installerPath)
            }
        }

        # Verify download
        if (Test-Path $installerPath) {
            $fileSize = (Get-Item $installerPath).Length
            Write-Host "Installer downloaded: $fileSize bytes"

            # Install silently
            Write-Host "Installing Access Database Engine silently..."
            $process = Start-Process -FilePath $installerPath -ArgumentList "/quiet", "/norestart", "ACCEPT=YES" -PassThru -Wait

            # Check exit code
            if ($process.ExitCode -eq 0) {
                Write-Host "Access Database Engine installed successfully"
            } else {
                Write-Host "Installation completed with exit code: $($process.ExitCode)"
            }

            # Verify installation by checking for ACE OLEDB provider
            Write-Host "Verifying installation..."
            $aceProvider = Get-ItemProperty "HKLM:\SOFTWARE\Classes\Microsoft.ACE.OLEDB.16.0" -ErrorAction SilentlyContinue
            if ($aceProvider) {
                Write-Host "ACE OLEDB 16.0 provider is registered"
            } else {
                Write-Host "Warning: ACE OLEDB provider not found in registry"
            }
        } else {
            Write-Host "Error: Installer file not found at $installerPath"
            exit 1
        }

    - name: Install SQLite
      shell: pwsh
      run: |
        Write-Host "Installing SQLite for Windows..."
        $downloadUrl = "https://www.sqlite.org/2024/sqlite-tools-win-x64-3460000.zip"
        $zipPath = "$env:TEMP\sqlite-tools.zip"
        $extractPath = "$env:TEMP\sqlite-tools"

        try {
          # Check if SQLite tools were restored from cache
          if (Test-Path $zipPath) {
              Write-Host "✅ SQLite tools found in cache"
              $fileSize = (Get-Item $zipPath).Length
              Write-Host "Cached SQLite tools size: $fileSize bytes"
          } else {
              Write-Host "⬇️ Downloading SQLite tools..."
              Invoke-WebRequest -Uri $downloadUrl -OutFile $zipPath -UseBasicParsing

              if (-not (Test-Path $zipPath)) {
                throw "Failed to download SQLite tools"
              }
          }

          # Extract to temp folder
          Write-Host "Extracting SQLite tools..."
          Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force

          # List contents for debugging
          Write-Host "Contents of extracted folder:"
          Get-ChildItem -Path $extractPath -Recurse | ForEach-Object { Write-Host "  $($_.FullName)" }

          # Find sqlite3.exe (removed -Name parameter to get file objects)
          $sqliteExe = Get-ChildItem -Path $extractPath -Filter "sqlite3.exe" -Recurse | Select-Object -First 1

          if ($sqliteExe -and $sqliteExe.FullName) {
            $sourcePath = $sqliteExe.FullName
            Write-Host "Found sqlite3.exe at: $sourcePath"

            # Copy to system directory
            Copy-Item $sourcePath "C:\Windows\System32\sqlite3.exe" -Force
            Write-Host "SQLite installed successfully"

            # Verify installation
            $version = & sqlite3 -version
            Write-Host "SQLite version: $version"
          } else {
            throw "sqlite3.exe not found in downloaded package"
          }
        }
        catch {
          Write-Host "Error installing SQLite: $($_.Exception.Message)"
          exit 1
        }

    - name: Cache Windows installers
      id: cache-installers
      uses: actions/cache@v4
      with:
        path: |
          ${{ runner.temp }}/AccessDatabaseEngine_X64.exe
          ${{ runner.temp }}/sqlite-tools.zip
        key: windows-installers-ace2016-sqlite3460000-v1
        enableCrossOsArchive: false

    - name: Installation of uv
      uses: astral-sh/setup-uv@v1

    - name: Cache UV dependencies and tools
      id: cache-uv
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          ~/.local/share/uv
        key: windows-x64-py3.13-uv-${{ hashFiles('birds_nest/uv.lock', 'birds_nest/pyproject.toml') }}
        restore-keys: |
          windows-x64-py3.13-uv-${{ hashFiles('birds_nest/uv.lock') }}
          windows-x64-py3.13-uv-
          windows-x64-uv-
          windows-uv-

    - name: Run Formatter
      shell: pwsh
      # using https://docs.astral.sh/ruff/formatter/ as a format checker for the code
      run: |
        cd birds_nest
        uv run ruff check pybirdai/utils/
        uv run ruff check pybirdai/entry_points/
        uv run ruff check pybirdai/process_steps/

    - name: Cache status report
      shell: pwsh
      run: |
        Write-Host "=== Cache Status Report ==="
        Write-Host "Windows Installers Cache Hit: ${{ steps.cache-installers.outputs.cache-hit }}"
        Write-Host "UV Dependencies Cache Hit: ${{ steps.cache-uv.outputs.cache-hit }}"

    - name: Setup environment
      shell: pwsh
      run: |
        cd birds_nest
        if ("${{ steps.cache-uv.outputs.cache-hit }}" -eq "true") {
            Write-Host "✅ UV cache hit - dependencies should be ready"
        } else {
            Write-Host "⬇️ UV cache miss - installing dependencies"
        }
        uv sync

    - name: Run Core Feature Setup
      shell: pwsh
      run: |
        cd birds_nest
        uv run pybirdai/standalone/run_core_pipeline_setup.py

    - name: Run Core Feature Pipeline
      shell: pwsh
      run: |
        cd birds_nest
        uv run pybirdai/standalone/run_core_pipeline_wo_setup.py

    - name: Run DPM Feature Pipeline
      shell: pwsh
      run: |
        cd birds_nest
        uv run pybirdai/standalone/run_dpm_pipeline_wo_setup.py

    - name: Run ANCRDT Feature Setup
      shell: pwsh
      run: |
        cd birds_nest
        uv run pybirdai/standalone/run_ancrdt_pipeline_setup.py

    - name: Run ANCRDT Feature Pipeline
      shell: pwsh
      run: |
        cd birds_nest
        uv run pybirdai/standalone/run_ancrdt_pipeline_wo_setup.py

  build-unix:
    name: "(ubuntu-latest, python 3.13, x64, sqlite3)"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v3
      with:
        python-version: '3.13'

    - name: Cache apt packages
      id: cache-apt
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: ubuntu-latest-apt-mdbtools-${{ runner.os }}-v1
        restore-keys: |
          ubuntu-latest-apt-mdbtools-${{ runner.os }}
          ubuntu-latest-apt-mdbtools-
          ubuntu-latest-apt-

    - name: Setup Unix environment
      run: |
        if [ "${{ steps.cache-apt.outputs.cache-hit }}" = "true" ]; then
            echo "✅ APT cache hit - packages may be cached"
        else
            echo "⬇️ APT cache miss - updating package lists"
        fi
        sudo apt-get update
        sudo apt-get install -y mdbtools
        # Ensure the runner user owns and can write to the birds_nest directory
        sudo chown -R $USER:$USER birds_nest/
        chmod -R u+w birds_nest/

    - name: Installation of uv
      uses: astral-sh/setup-uv@v1

    - name: Cache UV dependencies and tools
      id: cache-uv
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          ~/.local/share/uv
        key: unix-x64-py3.13-uv-${{ hashFiles('birds_nest/uv.lock', 'birds_nest/pyproject.toml') }}
        restore-keys: |
          unix-x64-py3.13-uv-${{ hashFiles('birds_nest/uv.lock') }}
          unix-x64-py3.13-uv-
          unix-x64-uv-
          unix-uv-

    - name: Cache status report
      run: |
        echo "=== Cache Status Report ==="
        echo "APT Packages Cache Hit: ${{ steps.cache-apt.outputs.cache-hit }}"
        echo "UV Dependencies Cache Hit: ${{ steps.cache-uv.outputs.cache-hit }}"

    - name: Setup environment
      run: |
        cd birds_nest
        if [ "${{ steps.cache-uv.outputs.cache-hit }}" = "true" ]; then
            echo "✅ UV cache hit - dependencies should be ready"
        else
            echo "⬇️ UV cache miss - installing dependencies"
        fi
        uv sync

    - name: Run Formatter
      # using https://docs.astral.sh/ruff/formatter/ as a format checker for the code
      run: |
        cd birds_nest
        uv run ruff check pybirdai/utils/
        uv run ruff check pybirdai/entry_points/
        uv run ruff check pybirdai/process_steps/

    - name: Run Core Feature Setup
      run: |
        cd birds_nest
        uv run pybirdai/standalone/run_core_pipeline_setup.py

    - name: Run Core Feature Pipeline
      run: |
        cd birds_nest
        uv run pybirdai/standalone/run_core_pipeline_wo_setup.py

    - name: Run DPM Feature Pipeline
      run: |
        cd birds_nest
        uv run pybirdai/standalone/run_dpm_pipeline_wo_setup.py

    - name: Run ANCRDT Feature Setup
      run: |
        cd birds_nest
        uv run pybirdai/standalone/run_ancrdt_pipeline_setup.py

    - name: Run ANCRDT Feature Pipeline
      run: |
        cd birds_nest
        uv run pybirdai/standalone/run_ancrdt_pipeline_wo_setup.py
