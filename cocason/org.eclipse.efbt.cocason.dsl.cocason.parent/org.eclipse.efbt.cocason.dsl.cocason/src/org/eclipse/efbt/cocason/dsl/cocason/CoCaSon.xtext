// automatically generated by Xtext
grammar org.eclipse.efbt.cocason.dsl.cocason.CoCaSon with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/efbt/platform_call" as platform_call
import "http://www.eclipse.org/efbt/cocamo"  as cocamo
import "http://www.eclipse.org/efbt/functionality_module" as functionality_module
import "http://www.eclipse.org/efbt/scenarios" as scenarios
import "http://www.eclipse.org/efbt/core" as core
import "http://www.eclipse.org/efbt/module_management" as module_management
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/efbt/reports" as reports
import "http://www.eclipse.org/efbt/smcubes_model" as smcubes_model
import "http://www.eclipse.org/efbt/test_definition" as test_definition
import "http://www.eclipse.org/efbt/requirements_text" as requirements_text
import "http://www.eclipse.org/efbt/data_definition" as data_definition
import "http://www.eclipse.org/efbt/test" as test
import "http://www.eclipse.org/efbt/efbt_data_definition" as efbt_data_definition
import "http://www.eclipse.org/efbt/efbt_vtl_transformation" as efbt_vtl_transformation
import "http://www.eclipse.org/efbt/efbt_mapping" as efbt_mapping
import "http://www.eclipse.org/efbt/vtl_transformation" as vtl_transformation
import "http://www.eclipse.org/efbt/mapping" as mapping
import "http://www.eclipse.org/efbt/base_column_structured_data" as base_column_structured_data
import "http://www.eclipse.org/efbt/test_input_data" as test_input_data
import "http://www.eclipse.org/efbt/column_structured_data" as column_structured_data
import "http://www.eclipse.org/efbt/attribute_lineage" as attribute_lineage
import "http://www.eclipse.org/efbt/functions" as functions
import "http://www.eclipse.org/efbt/column_transformation_logic" as column_transformation_logic
import "http://www.eclipse.org/efbt/row_transformation_logic" as row_transformation_logic
import "http://www.eclipse.org/efbt/cubes" as cubes
import "http://www.eclipse.org/efbt/cube_transformation_logic" as cube_transformation_logic 
import "http://www.eclipse.org/efbt/transformation" as transformation
import "http://www.eclipse.org/efbt/cube_schema" as cube_schema
import "http://www.eclipse.org/efbt/trl_sql_views" as trl_sql_views
import "http://www.eclipse.org/efbt/trl_report_cell_views" as trl_report_cell_views
import "http://www.eclipse.org/efbt/efbt_advanced_data_definition" as efbt_advanced_data_definition
import "http://www.eclipse.org/efbt/advanced_variable_lineagefunctions" as advanced_variable_lineagefunctions
import "http://www.eclipse.org/efbt/smcubes_functions" as smcubes_functions
import "http://www.eclipse.org/efbt/advanced_row_transformation_logic" as advanced_row_transformation_logic
import "http://www.eclipse.org/efbt/incremental_cubes" as incremental_cubes

ProgramAndCalls returns platform_call::ProgramAndCalls:
	{platform_call::ProgramAndCalls}
	'ProgramAndCalls' ':'
	'{'
		('platformCalls' ':' platformCalls=PlatformCallModule)?
		('program' ':' program=TRLProgram)?
	'}';


TRLProgram returns transformation::TRLProgram:
	{transformation::TRLProgram}
	'TRLProgram' ':'
	'{'
		('smcubesStaticModel' ':' smcubesStaticModel=SMCubesStaticModel)?		
		('executableLogic' ':' executableLogic=TRLExecutableLogic)?
		('structVariablesModule' ':' structVariablesModule=StructTypedVariablesModule)?
		('arrayTypedVariablesModule' ':' arrayTypedVariablesModule=ArrayTypedVariableModule)?
	'}';
	
StructTypedVariablesModule returns efbt_advanced_data_definition::StructTypedVariablesModule:
	{efbt_advanced_data_definition::StructTypedVariablesModule}
	'StructTypedVariablesModule'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString)?
		('license' ':' license=EString)?
		('version' ':' version=EString)?
		('dependencies' ':' dependencies=ModuleDependencies)?
		('longName' ':' longName=ModuleLongName)?
		('structTypeVariables' ':' '[' structTypeVariables+=StructTypedVariable ( "," structTypeVariables+=StructTypedVariable)* ']' )?
	'}';
	


ArrayTypedVariableModule returns efbt_advanced_data_definition::ArrayTypedVariableModule:
	{efbt_advanced_data_definition::ArrayTypedVariableModule}
	'ArrayTypedVariableModule'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString)?
		('license' ':' license=EString)?
		('version' ':' version=EString)?
		('dependencies' ':' dependencies=ModuleDependencies)?
		('longName' ':' longName=ModuleLongName)?
		('arrayTypedVariables' ':' '[' arrayTypedVariables+=ArrayTypedVariable ( "," arrayTypedVariables+=ArrayTypedVariable)* ']' )?
	'}';
	
StructTypedVariable returns efbt_advanced_data_definition::StructTypedVariable:
	{efbt_advanced_data_definition::StructTypedVariable}
	'StructTypedVariable'
	name=EString ':'
	'{'
		('code' ':' code=EString)?
		('description' ':' description=EString)?
		('primary_concept' ':' primary_concept=EString)?
		('variable_id' ':' variable_id=EString)?
		('displayName' ':' displayName=EString)?
		('domain_id' ':' domain_id=[core::DOMAIN|EString])?
		('maintenance_agency_id' ':' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
		('cubeType' ':' cubeType=[cubes::BaseCube|EString])?
	'}';

ArrayTypedVariable returns efbt_advanced_data_definition::ArrayTypedVariable:
	{efbt_advanced_data_definition::ArrayTypedVariable}
	'ArrayTypedVariable'
	name=EString ':'
	'{'
		('code' ':' code=EString)?
		('description' ':' description=EString)?
		('primary_concept' ':' primary_concept=EString)?
		('variable_id' ':' variable_id=EString)?
		('displayName' ':' displayName=EString)?
		('domain_id' ':' domain_id=[core::DOMAIN|EString])?
		('maintenance_agency_id' ':' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
		('cubeType' ':' cubeType=[cubes::BaseCube|EString])?
	'}';


TRLExecutableLogic returns transformation::TRLExecutableLogic:
	{transformation::TRLExecutableLogic}
	'TRLExecutableLogic'
	name=EString ':'
	'{'
		('componentSet' ':' componentSet=VersionedComponentsSet)?
		('cubesModule' ':' cubesModule=FreeBirdToolsCubeModule)?
		('functionSpecModule' ':' functionSpecModule=FunctionSpecModule)?
		('cubesHierarchyModule' ':' cubesHierarchyModule=FreeBIRDToolsCubeHierarchyRelationshipModule)?
	'}';
	
FreeBIRDToolsCubeHierarchyRelationshipModule returns cubes::FreeBIRDToolsCubeHierarchyRelationshipModule:
	{cubes::FreeBIRDToolsCubeHierarchyRelationshipModule}
	'FreeBIRDToolsCubeHierarchyRelationshipModule'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString)?
		('license' ':' license=EString)?
		('version' ':' version=EString)?
		('dependencies' ':' dependencies=ModuleDependencies)?
		('longName' ':' longName=ModuleLongName)?
		('hierarchyRelationships' ':' '[' hierarchyRelationships+=FreeBIRDToolsCubeHierarchyRelationship ( "," hierarchyRelationships+=FreeBIRDToolsCubeHierarchyRelationship)* ']' )?
	'}';

FreeBIRDToolsCubeHierarchyRelationship returns cubes::FreeBIRDToolsCubeHierarchyRelationship:
	{cubes::FreeBIRDToolsCubeHierarchyRelationship}
	'FreeBIRDToolsCubeHierarchyRelationship' ':'
	'{'
		('superCube' ':' superCube=[cubes::DerivedCube|EString])?
		('subCube' ':' subCube=[cubes::DerivedCube|EString])?
	'}';
	
FunctionSpecModule returns functions::FunctionSpecModule:
	{functions::FunctionSpecModule}
	'FunctionSpecModule'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString)?
		('license' ':' license=EString)?
		('version' ':' version=EString)?
		('dependencies' ':' dependencies=ModuleDependencies)?
		('longName' ':' longName=ModuleLongName)?
		('functionSpecs' ':' '[' functionSpecs+=FunctionSpec ( "," functionSpecs+=FunctionSpec)* ']' )?
	'}';
	
	
VersionedComponentsSet returns transformation::VersionedComponentsSet:
	VersionedComponentsSet_Impl | Release;
	

VersionedComponentsSet_Impl returns transformation::VersionedComponentsSet:
	{transformation::VersionedComponentsSet}
	'VersionedComponentsSet'
	name=EString ':'
	'{'
		('license' ':' license=EString)?
		('cubeSchemaModules' ':' '[' cubeSchemaModules+=VersionedCubeSchemaModule ( "," cubeSchemaModules+=VersionedCubeSchemaModule)* ']' )?
		('datasetTransformationModules' ':' '[' datasetTransformationModules+=VersionedSQLViewsModule ( "," datasetTransformationModules+=VersionedSQLViewsModule)* ']' )?
		('reportCellViewModules' ':' '[' reportCellViewModules+=ReportCellViewModule ( "," reportCellViewModules+=ReportCellViewModule)* ']' )?
	'}';
	
FreeBirdToolsCubeModule returns cubes::FreeBirdToolsCubeModule:
	{cubes::FreeBirdToolsCubeModule}
	'FreeBirdToolsCubeModule'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString)?
		('license' ':' license=EString)?
		('version' ':' version=EString)?
		('dependencies' ':' dependencies=ModuleDependencies)?
		('longName' ':' longName=ModuleLongName)?
		('cubes' ':' '[' cubes+=FreeBirdToolsCube ( "," cubes+=FreeBirdToolsCube)* ']' )?
	'}';

VersionedCubeSchemaModule returns transformation::VersionedCubeSchemaModule:
	{transformation::VersionedCubeSchemaModule}
	'VersionedCubeSchemaModule'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString)?
		('license' ':' license=EString)?
		('version' ':' version=EString)?
		('dependencies' ':' dependencies=ModuleDependencies)?
		('longName' ':' longName=ModuleLongName)?
		('schemas' ':' '[' schemas+=CubeSchema ( "," schemas+=CubeSchema)* ']' )?
	'}';

VersionedFunctionalModuleLogic returns transformation::VersionedFunctionalModuleLogic:
	{transformation::VersionedFunctionalModuleLogic}
	'VersionedFunctionalModuleLogic'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString)?
		('license' ':' license=EString)?
		('version' ':' version=EString)?
		('dependencies' ':' dependencies=ModuleDependencies)?
		('longName' ':' longName=ModuleLongName)?
	'}';

ReportCellViewModule returns trl_report_cell_views::ReportCellViewModule:
	{trl_report_cell_views::ReportCellViewModule}
	'ReportCellViewModule'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString)?
		('license' ':' license=EString)?
		('version' ':' version=EString)?
		('dependencies' ':' dependencies=ModuleDependencies)?
		('longName' ':' longName=ModuleLongName)?
		('reportCellViews' '[' reportCellViews+=ReportCellView ( "," reportCellViews+=ReportCellView)* ']' )?
	'}';

Release returns transformation::Release:
	{transformation::Release}
	'Release'
	name=EString ':'
	'{'
		('license' ':' license=EString)?
		('version' ':' version=EString)?
		('cubeSchemaModules' ':' '[' cubeSchemaModules+=VersionedCubeSchemaModule ( "," cubeSchemaModules+=VersionedCubeSchemaModule)* ']' )?
		('datasetTransformationModules' ':' '[' datasetTransformationModules+=VersionedSQLViewsModule ( "," datasetTransformationModules+=VersionedSQLViewsModule)* ']' )?
		('reportCellViewModules' ':' '[' reportCellViewModules+=ReportCellViewModule ( "," reportCellViewModules+=ReportCellViewModule)* ']' )?
	'}';

VersionedSQLViewsModule returns trl_sql_views::VersionedSQLViewsModule:
	{trl_sql_views::VersionedSQLViewsModule}
	'VersionedSQLViewsModule'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString)?
		('license' ':' license=EString)?
		('version' ':' version=EString)?
		('dependencies' ':' dependencies=ModuleDependencies)?
		('longName' ':' longName=ModuleLongName)?
		('sqlViews' ':' '[' sqlViews+=SQLView ( "," sqlViews+=SQLView)* ']' )?
	'}';
	
SQLView returns trl_sql_views::SQLView:
	SQLView_Impl | AggregateEnrichmentView | CopyView | EnrichmentView | FilterByConditionView | GenericView | JoinView | UnionView | BaseViewIncorporatingDeltas | DeltaAccumulation | CastColumnView | ExplodeArrayOfStructsView | ExplodeStructView | FilterByStructClassColumnView | MakeArrayOfStructsView | MakeStructView;

SQLView_Impl returns trl_sql_views::SQLView:
	{trl_sql_views::SQLView}
	'SQLView'
	name=EString ':'
	'{'
		('VTL_Code' ':' VTL_Code=EString)?
		('cube' ':' cube=[cubes::DerivedCube|EString])?
	'}';

AggregateEnrichmentView returns trl_sql_views::AggregateEnrichmentView:
	{trl_sql_views::AggregateEnrichmentView}
	'AggregateEnrichmentView'
	name=EString ':'
	'{'
		('VTL_Code' ':' VTL_Code=EString)?
		('cube' ':' cube=[cubes::DerivedCube|EString])?
		('functions' ':' '[' functions+=AggregateColumnFunction ( "," functions+=AggregateColumnFunction)* ']' )?
		('groupByClause' ':' groupByClause=GroupByClause)?
	'}';

CopyView returns trl_sql_views::CopyView:
	{trl_sql_views::CopyView}
	'CopyView'
	name=EString ':'
	'{'
		('VTL_Code' ':' VTL_Code=EString)?
		('cube' ':' cube=[cubes::DerivedCube|EString])?
	'}';

EnrichmentView returns trl_sql_views::EnrichmentView:
	{trl_sql_views::EnrichmentView}
	'EnrichmentView'
	name=EString ':'
	'{'
		('VTL_Code' ':' VTL_Code=EString)?
		('cube' ':' cube=[cubes::DerivedCube|EString])?
		('functions' ':' '[' functions+=BasicColumnFunction ( "," functions+=BasicColumnFunction)* ']' )?
		('renames' ':' '[' renames+=RenameAs ( "," renames+=RenameAs)* ']' )?
	'}';

FilterByConditionView returns trl_sql_views::FilterByConditionView:
	{trl_sql_views::FilterByConditionView}
	'FilterByConditionView'
	name=EString ':'
	'{'
		('VTL_Code' ':' VTL_Code=EString)?
		('cube' ':' cube=[cubes::DerivedCube|EString])?
		('whereClause' ':' whereClause=WhereClause)?
	'}';

GenericView returns trl_sql_views::GenericView:
	{trl_sql_views::GenericView}
	'GenericView'
	name=EString ':'
	'{'
		('VTL_Code' ':' VTL_Code=EString)?
		('cube' ':' cube=[cubes::DerivedCube|EString])?
		('selectClause' ':' selectClause=SelectClause)?
		('whereClause' ':' whereClause=WhereClause)?
		('groupByClause' ':' groupByClause=GroupByClause)?
	'}';

JoinView returns trl_sql_views::JoinView:
	{trl_sql_views::JoinView}
	'JoinView'
	name=EString ':'
	'{'
		('VTL_Code' ':' VTL_Code=EString)?
		('cube' ':' cube=[cubes::DerivedCube|EString])?
		('whereClause' ':' whereClause=WhereClause)?
		('renames' ':' '[' renames+=RenameAs ( "," renames+=RenameAs)* ']' )?
		('ignores' ':' '[' ignores+=IgnoreColumn ( "," ignores+=IgnoreColumn)* ']' )?
	'}';

UnionView returns trl_sql_views::UnionView:
	{trl_sql_views::UnionView}
	'UnionView'
	name=EString ':'
	'{'
		('VTL_Code' ':' VTL_Code=EString)?
		('cube' ':' cube=[cubes::DerivedCube|EString])?
	'}';

BaseViewIncorporatingDeltas returns trl_sql_views::BaseViewIncorporatingDeltas:
	{trl_sql_views::BaseViewIncorporatingDeltas}
	'BaseViewIncorporatingDeltas'
	name=EString ':'
	'{'
		('VTL_Code' ':' VTL_Code=EString)?
		('cube' ':' cube=[cubes::DerivedCube|EString])?
		('ultimateSourceCube' ':' ultimateSourceCube=[cubes::FreeBirdToolsCube|EString])?
	'}';

DeltaAccumulation returns trl_sql_views::DeltaAccumulation:
	{trl_sql_views::DeltaAccumulation}
	'DeltaAccumulation'
	name=EString ':'
	'{'
		('VTL_Code' ':' VTL_Code=EString)?
		('cube' ':' cube=[cubes::DerivedCube|EString])?
		('ultimateSourceCube' ':' ultimateSourceCube=[cubes::FreeBirdToolsCube|EString])?
	'}';
	
CastColumnView returns trl_sql_views::CastColumnView:
	{trl_sql_views::CastColumnView}
	'CastColumnView'
	name=EString ':'
	'{'
		('VTL_Code' ':' VTL_Code=EString)?
		('cube' ':' cube=[cubes::DerivedCube|EString])?
		('sourceStructVariable' ':' sourceStructVariable=[efbt_advanced_data_definition::StructTypedVariable|EString])?
		('targetStructVariable' ':' targetStructVariable=[efbt_advanced_data_definition::StructTypedVariable|EString])?
	'}';

ExplodeArrayOfStructsView returns trl_sql_views::ExplodeArrayOfStructsView:
	{trl_sql_views::ExplodeArrayOfStructsView}
	'ExplodeArrayOfStructsView'
	name=EString ':'
	'{'
		('VTL_Code' ':' VTL_Code=EString)?
		('cube' ':' cube=[cubes::DerivedCube|EString])?
		('arraySourceColumn' ':' arraySourceColumn=[efbt_advanced_data_definition::ArrayTypedVariable|EString])?
		('indexColumn' ':' indexColumn=[core::VARIABLE|EString])?
		('targetStructColumn' ':' targetStructColumn=[efbt_advanced_data_definition::StructTypedVariable|EString])?
	'}';

ExplodeStructView returns trl_sql_views::ExplodeStructView:
	{trl_sql_views::ExplodeStructView}
	'ExplodeStructView'
	name=EString ':'
	'{'
		('VTL_Code' ':' VTL_Code=EString)?
		('cube' ':' cube=[cubes::DerivedCube|EString])?
		('columnToUnpack' ':' columnToUnpack=[efbt_advanced_data_definition::StructTypedVariable|EString])?
	'}';

FilterByStructClassColumnView returns trl_sql_views::FilterByStructClassColumnView:
	{trl_sql_views::FilterByStructClassColumnView}
	'FilterByStructClassColumnView'
	name=EString ':'
	'{'
		('VTL_Code' ':' VTL_Code=EString)?
		('cube' ':' cube=[cubes::DerivedCube|EString])?
		('renameAsStructColumn' ':' renameAsStructColumn=[efbt_advanced_data_definition::StructTypedVariable|EString])?
		('structClass' ':' structClass=[cubes::FreeBirdToolsCube|EString])?
		('structColumn' ':' structColumn=[efbt_advanced_data_definition::StructTypedVariable|EString])?
	'}';

MakeArrayOfStructsView returns trl_sql_views::MakeArrayOfStructsView:
	{trl_sql_views::MakeArrayOfStructsView}
	'MakeArrayOfStructsView'
	name=EString ':'
	'{'
		('VTL_Code' ':' VTL_Code=EString)?
		('cube' ':' cube=[cubes::DerivedCube|EString])?
		('groupingVariable' ':' groupingVariable=[core::VARIABLE|EString])?
		('sourceStructVariable' ':' sourceStructVariable=[efbt_advanced_data_definition::StructTypedVariable|EString])?
		('targetArrayVariable' ':' targetArrayVariable=[efbt_advanced_data_definition::ArrayTypedVariable|EString])?
	'}';

MakeStructView returns trl_sql_views::MakeStructView:
	{trl_sql_views::MakeStructView}
	'MakeStructView'
	name=EString ':'
	'{'
		('VTL_Code' ':' VTL_Code=EString)?
		('cube' ':' cube=[cubes::DerivedCube|EString])?
		('targetVariable' ':' targetVariable=[efbt_advanced_data_definition::StructTypedVariable|EString])?
	'}';

GroupByClause returns trl_sql_views::GroupByClause:
	{trl_sql_views::GroupByClause}
	'GroupByClause' ':'
	'{'
		('groupByColumns' ':' '[' groupByColumns+=[core::VARIABLE|EString] ( "," groupByColumns+=[core::VARIABLE|EString])* ']' )?
	'}';

RenameAs returns trl_sql_views::RenameAs:
	{trl_sql_views::RenameAs}
	'RenameAs' ':'
	'{'
		('fromCube' ':' fromCube=[cubes::FreeBirdToolsCube|EString])?
		('fromVariable' ':' fromVariable=[core::VARIABLE|EString])?
		('toVariable' ':' toVariable=[core::VARIABLE|EString])?
	'}';

WhereClause returns trl_sql_views::WhereClause:
	{trl_sql_views::WhereClause}
	'WhereClause' ':'
	'{'
		('function' ':' function=BooleanFunction)?
	'}';

SelectClause returns trl_sql_views::SelectClause:
	{trl_sql_views::SelectClause}
	'SelectClause' ':'
	'{'
		('aggregateFunctions' ':' '(' aggregateFunctions+=[functions::AggregateFunction|EString] ( "," aggregateFunctions+=[functions::AggregateFunction|EString])* ')' )?
		('basicFunctions' ':' basicFunctions=[functions::BasicFunction|EString])?
		('varaibles' ':' '(' varaibles+=[core::VARIABLE|EString] ( "," varaibles+=[core::VARIABLE|EString])* ')' )?
	'}';

IgnoreColumn returns trl_sql_views::IgnoreColumn:
	{trl_sql_views::IgnoreColumn}
	'IgnoreColumn' ':'
	'{'
		('columnToIgnore' ':' columnToIgnore=[core::VARIABLE|EString])?
		('cube' ':' cube=[cubes::FreeBirdToolsCube|EString])?
	'}';
	
		
CubeSchema returns cube_schema::CubeSchema:
	{cube_schema::CubeSchema}
	'CubeSchema'
	name=EString ':'
	'{'
		('cube' ':' cube=[data_definition::CUBE|EString])?
		('baseCube' ':' baseCube=[cubes::BaseCube|EString])?
	'}';

ReportCellView returns trl_report_cell_views::ReportCellView:
	{trl_report_cell_views::ReportCellView}
	'ReportCellView'
	name=EString ':'
	'{'
		('VTL_Code' ':' VTL_Code=EString)?
		('cube' ':' cube=[cubes::DerivedCube|EString])?
		('structColumnHoldingDimension' ':' structColumnHoldingDimension=[efbt_advanced_data_definition::StructTypedVariable|EString])?
		('structColumnHoldingMeasure' ':' structColumnHoldingMeasure=[efbt_advanced_data_definition::StructTypedVariable|EString])?
		('reportCell' ':' reportCell=ReportCell)?
	'}';
		

PlatformCall returns platform_call::PlatformCall:
	PlatformCall_Impl | CompareAttributeLineageModels | TranslateBIRDWithOldTestFormatToCocason | ConvertSQLDeveloperModelToEcore | TranslateBIRDWithNewTestFormatToCocason | CreateAttributeLineageModel | CreateAttributeLineageForOneReportCell;


CreateAttributeLineageForOneReportCell returns platform_call::CreateAttributeLineageForOneReportCell:
	{platform_call::CreateAttributeLineageForOneReportCell}
	'CreateAttributeLineageForOneReportCell'
	name=EString ':'
	'{'
		('errorMessage' ':' errorMessage=EString)?
		('returnStatus' ':' returnStatus=EInt)?
		('executableLogic' ':' executableLogic=[transformation::TRLExecutableLogic|EString])?
		('unresolvedCubeColumnParams' ':' '(' unresolvedCubeColumnParams+=[column_transformation_logic::SpeculativeCubeColumnParameter|EString] ( "," unresolvedCubeColumnParams+=[column_transformation_logic::SpeculativeCubeColumnParameter|EString])* ')' )?
		('reportCell' ':' reportCell=[reports::ReportCell|EString])?
		('resultingALM' ':' resultingALM=AttributeLineageModel)?
	'}';








TestDefinition returns test_definition::TestDefinition:
	TestDefinition_Impl | E2ETestDefinition | UnitTestDefinition;




FunctionalityModule returns functionality_module::FunctionalityModule:
	DataProcessingFunctionalityModule | LeafFunctionalityModule_Impl | ParallelFunctionalityModule | ScenarioSetFunctionalityModule | SerialFunctionalityModule | FunctionalityModuleSet_Impl | ReadDataSourceFunctionalityModule | ReportCellCreationFunctionalityModule | ValidationFunctionalityModule;























RequirementsSection returns requirements_text::RequirementsSection:
	RequirementsSectionImage | RequirementsSectionLinkWithText | RequirementsSectionText | TitledRequirementsSection;














BaseCell returns base_column_structured_data::BaseCell:
	BaseCellWithEnumeratedValue | BaseCellWithValue;








FunctionSpec returns functions::FunctionSpec:
	FunctionSpec_Impl | AggregateFunctionSpec | BasicFunctionSpec;



CubeColumn returns column_transformation_logic::CubeColumn:
	CubeColumn_Impl | AggregateColumnFunction | BasicColumnFunction | ColumnFunction_Impl;



ColumnFunction returns column_transformation_logic::ColumnFunction:
	ColumnFunction_Impl | AggregateColumnFunction | BasicColumnFunction;

RowCreationApproach returns row_transformation_logic::RowCreationApproach:
	RowCreationApproach_Impl | CustomRowCreationApproach | FilterAndGroupToOneRowCreationApproach | OneToOneRowCreationApproach | FilterRowCreationApproach | GroupByRowCreationApproach | RowJoinFunction | UnionRowCreationApproach | ExplodeArrayOfStructsRowFunction;

FreeBirdToolsCube returns cubes::FreeBirdToolsCube:
	FreeBirdToolsCube_Impl | BaseCube_Impl | DerivedCube_Impl | TargetCube | BaseViewCube | BaseDeltaCube | DeltaAccumulationCube ;


BasicFunction returns functions::BasicFunction:
	BasicFunction_Impl | BooleanFunction;

Parameter returns functions::Parameter:
	Parameter_Impl | AggregateFunction | BasicFunction_Impl | BooleanFunction | SpeculativeCubeColumnParameter | SpeculativeStructColumnParameter |Function_Impl | MemberParameter | ValueParameter;


SpeculativeCubeColumnParameter returns column_transformation_logic::SpeculativeCubeColumnParameter:
	{column_transformation_logic::SpeculativeCubeColumnParameter}
	'SpeculativeCubeColumnParameter' ':'
	'{'
		('column' ':' column=[core::VARIABLE|EString])?
		('cube' ':' cube=[cubes::FreeBirdToolsCube|EString])?
	'}';

SpeculativeStructColumnParameter returns advanced_variable_lineagefunctions::SpeculativeStructColumnParameter:
	{advanced_variable_lineagefunctions::SpeculativeStructColumnParameter}
	'SpeculativeStructColumnParameter' ':'
	'{'
		('column' ':' columnInsideStruct=[core::VARIABLE|EString])?
		('cube' ':' cube=[cubes::FreeBirdToolsCube|EString])?
		('structColumn' ':' structColumn=[efbt_advanced_data_definition::StructTypedVariable|EString])?
	'}';


MemberParameter returns smcubes_functions::MemberParameter:
	{smcubes_functions::MemberParameter}
	'MemberParameter'  ':'
	'{'
		('param' ':' param=[core::MEMBER|EString])?
	'}';
	
ValueParameter returns smcubes_functions::ValueParameter:
	{smcubes_functions::ValueParameter}
	'ValueParameter'  ':'
	'{'
		('dataType' ':' dataType=FACET_VALUE_TYPE )?
		('value' ':' value=EString)?
	'}';

DerivedCube returns cubes::DerivedCube:
	DerivedCube_Impl | TargetCube | BaseViewCube | DeltaAccumulationCube ;
	
BaseCube returns cubes::BaseCube:
	BaseCube_Impl | BaseDeltaCube ;
	
BaseCube_Impl returns cubes::BaseCube:
	{cubes::BaseCube}
	'BaseCube'
	name=EString ;
	
BaseDeltaCube returns incremental_cubes::BaseDeltaCube:
	{incremental_cubes::BaseDeltaCube}
	'BaseDeltaCube'
	name=EString ':' 
	'{'
		('ultimateBaseCube' ':' ultimateBaseCube=[cubes::BaseCube|EString] )?
	'}';

BaseViewCube returns incremental_cubes::BaseViewCube:
	{incremental_cubes::BaseViewCube}
	'BaseViewCube'
	name=EString ':'
	'{'
		('sourceCubes' ':' '[' sourceCubes+=[cubes::FreeBirdToolsCube|EString] ( "," sourceCubes+=[cubes::FreeBirdToolsCube|EString])* ']' )?
		('ultimateBaseCube' ':' ultimateBaseCube=[cubes::BaseCube|EString] )?
	'}';
	
DeltaAccumulationCube returns incremental_cubes::DeltaAccumulationCube:
	{incremental_cubes::DeltaAccumulationCube}
	'DeltaAccumulationCube'
	name=EString ':'
	'{'
		('sourceCubes' ':' '[' sourceCubes+=[cubes::FreeBirdToolsCube|EString] ( "," sourceCubes+=[cubes::FreeBirdToolsCube|EString])* ']' )?
	'}';
	
Function returns functions::Function:
	Function_Impl | AggregateFunction | BasicFunction_Impl | BooleanFunction;

SMCubesStaticModel returns cocamo::SMCubesStaticModel:
	{cocamo::SMCubesStaticModel}
	'SMCubesStaticModel' 
	name=EString  ':'
	'{'
		('smCubesModel' ':' smCubesModel=SmcubesModel )?
		('requirements' ':' requirements=RequirementsModule )?
		('testDefinitions' ':' testDefinitions=TestDefinitionModule )?
		('tests' ':' tests=SMCubesTestModule )?
		('testTemplates' ':' testTemplates=TestTemplateModule )?
		('testConstriants' ':' testConstriants=TestContraints )?
		('functionalityModules' ':' functionalityModules=FunctionalityModuleModule )?
	'}';

PlatformCallModule returns platform_call::PlatformCallModule:
	{platform_call::PlatformCallModule}
	'PlatformCallModule'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString )?
		('license' ':' license=EString )?
		('version' ':' version=EString )?
		('dependencies' ':' dependencies=ModuleDependencies )?
		('longName' ':' longName=ModuleLongName )?
		('platformCalls'  ':''[' platformCalls+=PlatformCall ( "," platformCalls+=PlatformCall)* ']' )?
	'}';



EString returns ecore::EString:
	STRING | ID;

SmcubesModel returns smcubes_model::SmcubesModel:
	{smcubes_model::SmcubesModel}
	'SmcubesModel'
	name=EString ':'
	'{'
		('domains' ':' '[' domains+=DomainModule ( "," domains+=DomainModule)* ']' )?
		('members' ':' '[' members+=MemberModule ( "," members+=MemberModule)* ']' )?
		('variables' ':' '[' variables+=VariableModule ( "," variables+=VariableModule)* ']' )?
		('cubes' ':' '[' cubes+=CubeModule ( "," cubes+=CubeModule)* ']' )?
		('combinations' ':' '[' combinations+=CombinationModule ( "," combinations+=CombinationModule)* ']' )?
		('functionalModules' ':' '[' functionalModules+=TransformationSchemeModule ( "," functionalModules+=TransformationSchemeModule)* ']' )?
		('mappings' ':' '[' mappings+=MappingDefinitionModule ( "," mappings+=MappingDefinitionModule)* ']' )?
	'}';

RequirementsModule returns requirements_text::RequirementsModule:
	{requirements_text::RequirementsModule}
	'RequirementsModule'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString )?
		('license' ':' license=EString )?
		('version' ':' version=EString )?
		('dependencies' ':' dependencies=ModuleDependencies )?
		('longName' ':' longName=ModuleLongName )?
		('rules' ':' '[' rules+=TitledRequirementsSection ( "," rules+=TitledRequirementsSection)* ']' )?
		('allowedtypes' ':' allowedtypes=AllowedTypes)?
	'}';

TestDefinitionModule returns test_definition::TestDefinitionModule:
	{test_definition::TestDefinitionModule}
	'TestDefinitionModule'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString )?
		('license' ':' license=EString )?
		('version' ':' version=EString )?
		('dependencies' ':' dependencies=ModuleDependencies )?
		('longName' ':' longName=ModuleLongName )?
		('testDefinitions' ':' '[' testDefinitions+=TestDefinition ( "," testDefinitions+=TestDefinition)* ']' )?
	'}';

SMCubesTestModule returns cocamo::SMCubesTestModule:
	{cocamo::SMCubesTestModule}
	'SMCubesTestModule'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString )?
		('license' ':' license=EString )?
		('version' ':' version=EString )?
		('dependencies' ':' dependencies=ModuleDependencies )?
		('longName' ':' longName=ModuleLongName )?
		('tests' ':' '[' tests+=SMCubesTest ( "," tests+=SMCubesTest)* ']' )?
	'}';

TestTemplateModule returns test_definition::TestTemplateModule:
	{test_definition::TestTemplateModule}
	'TestTemplateModule'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString )?
		('license' ':' license=EString )?
		('version' ':' version=EString )?
		('dependencies' ':' dependencies=ModuleDependencies )?
		('longName' ':' longName=ModuleLongName )?
		('templates' ':' '[' templates+=TestTemplate ( "," templates+=TestTemplate)* ']' )?
	'}';

TestContraints returns test_definition::TestContraints:
	{test_definition::TestContraints}
	'TestContraints'
	name=EString ':'
	'{'
		('template' ':' template=[test_definition::TestTemplate|EString] )?
		('givenParams' ':' '[' givenParams+=Param ( "," givenParams+=Param)* ']' )?
		('whenParams' ':' '[' whenParams+=Param ( "," whenParams+=Param)* ']' )?
		('thenParams' ':' '[' thenParams+=Param ( "," thenParams+=Param)* ']' )?
	'}';

FunctionalityModuleModule returns functionality_module::FunctionalityModuleModule:
	{functionality_module::FunctionalityModuleModule}
	'FunctionalityModuleModule'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString )?
		('license' ':' license=EString )?
		('version' ':' version=EString )?
		('dependencies' ':' dependencies=ModuleDependencies )?
		('longName' ':' longName=ModuleLongName )?
		('FunctionalityModules' ':' '[' FunctionalityModules+=FunctionalityModule ( "," FunctionalityModules+=FunctionalityModule)* ']' )?
		('functionalityModuleTags' ':' '[' functionalityModuleTags+=FunctionalityModuleTag ( "," functionalityModuleTags+=FunctionalityModuleTag)* ']' )?
		('SceanrioTags' ':' '[' SceanrioTags+=ScenarioTag ( "," SceanrioTags+=ScenarioTag)* ']' )?
	'}';
	
FunctionalityModuleTag returns functionality_module::FunctionalityModuleTag:
	{functionality_module::FunctionalityModuleTag}
	'FunctionalityModuleTag'
	name=EString ':'
	'{'
		('displayName'  ':'displayName=EString)?
		('requirements'  ':' '[' requirements+=[requirements_text::TitledRequirementsSection|EString] ( "," requirements+=[requirements_text::TitledRequirementsSection|EString])* ']' )?
		('FunctionalityModule' ':' FunctionalityModule=[functionality_module::FunctionalityModule|EString])?
	'}';

ScenarioTag returns scenarios::ScenarioTag:
	{scenarios::ScenarioTag}
	'ScenarioTag'
	name=EString ':'
	'{'
		('displayName'  ':' displayName=EString)?
		('requirements'  ':' '[' requirements+=[requirements_text::TitledRequirementsSection|EString] ( "," requirements+=[requirements_text::TitledRequirementsSection|EString])* ']' )?
		('scenario'  ':' scenario=[scenarios::Scenario|EString])?
	'}';


DomainModule returns efbt_data_definition::DomainModule:
	{efbt_data_definition::DomainModule}
	'DomainModule'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString )?
		('license' ':' license=EString )?
		('version' ':' version=EString )?
		('dependencies' ':' dependencies=ModuleDependencies )?
		('longName' ':' longName=ModuleLongName )?
		('domains' ':' '[' domains+=DOMAIN ( "," domains+=DOMAIN)* ']' )?
	'}';

MemberModule returns efbt_data_definition::MemberModule:
	{efbt_data_definition::MemberModule}
	'MemberModule'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString )?
		('license' ':' license=EString )?
		('version' ':' version=EString )?
		('dependencies' ':' dependencies=ModuleDependencies )?
		('longName' ':' longName=ModuleLongName )?
		('members' ':' '[' members+=MEMBER ( "," members+=MEMBER)* ']' )?
	'}';

VariableModule returns efbt_data_definition::VariableModule:
	{efbt_data_definition::VariableModule}
	'VariableModule'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString )?
		('license' ':' license=EString )?
		('version' ':' version=EString )?
		('dependencies' ':' dependencies=ModuleDependencies )?
		('longName' ':' longName=ModuleLongName )?
		('variables' ':' '[' variables+=VARIABLE ( "," variables+=VARIABLE)* ']' )?
	'}';

CubeModule returns efbt_data_definition::CubeModule:
	{efbt_data_definition::CubeModule}
	'CubeModule'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString )?
		('license' ':' license=EString )?
		('version' ':' version=EString )?
		('dependencies' ':' dependencies=ModuleDependencies )?
		('longName' ':' longName=ModuleLongName )?
		('cubes' ':' '[' cubes+=CUBE ( "," cubes+=CUBE)* ']' )?
		('cubeStructures' ':' '[' cubeStructures+=CUBE_STRUCTURE ( "," cubeStructures+=CUBE_STRUCTURE)* ']'  )?
		('cubeStructureItems' ':' '[' cubeStructureItems+=CUBE_STRUCTURE_ITEM ( "," cubeStructureItems+=CUBE_STRUCTURE_ITEM)* ']' )?
	'}';

CombinationModule returns efbt_data_definition::CombinationModule:
	{efbt_data_definition::CombinationModule}
	'CombinationModule'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString )?
		('license' ':' license=EString )?
		('version' ':' version=EString )?
		('dependencies' ':' dependencies=ModuleDependencies )?
		('longName' ':' longName=ModuleLongName )?
		('combinations' ':' '[' combinations+=COMBINATION ( "," combinations+=COMBINATION)* ']'  )?
		('combination_items' ':' '[' combination_items+=COMBINATION_ITEM ( "," combination_items+=COMBINATION_ITEM)* ']'  )?
		('cubeToCombinationLinks' ':' '[' cubeToCombinationLinks+=CUBE_TO_COMBINATION ( "," cubeToCombinationLinks+=CUBE_TO_COMBINATION)* ']' )?
	'}';

TransformationSchemeModule returns efbt_vtl_transformation::TransformationSchemeModule:
	{efbt_vtl_transformation::TransformationSchemeModule}
	'TransformationSchemeModule'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString )?
		('license' ':' license=EString )?
		('version' ':' version=EString )?
		('dependencies' ':' dependencies=ModuleDependencies )?
		('longName' ':' longName=ModuleLongName )?
		('schemes' ':' '[' schemes+=TRANSFORMATION_SCHEME ( "," schemes+=TRANSFORMATION_SCHEME)* ']' )?
	'}';

MappingDefinitionModule returns efbt_mapping::MappingDefinitionModule:
	{efbt_mapping::MappingDefinitionModule}
	'MappingDefinitionModule'
	name=EString ':'
	'{'
		('theDescription' ':' theDescription=EString )?
		('license' ':' license=EString )?
		('version' ':' version=EString )?
		('dependencies' ':' dependencies=ModuleDependencies )?
		('longName' ':' longName=ModuleLongName )?
		('mappings' ':' '[' mappings+=MAPPING_DEFINITION ( "," mappings+=MAPPING_DEFINITION)* ']' )?
	'}';

ModuleDependencies returns module_management::ModuleDependencies:
	{module_management::ModuleDependencies}
	'ModuleDependencies' ':'
	'{'
		('theModules' ':' '[' theModules+=ModuleDependency ( "," theModules+=ModuleDependency)* ']' )?
	'}';

ModuleLongName returns module_management::ModuleLongName:
	{module_management::ModuleLongName}
	'ModuleLongName'
	name=EString;

DOMAIN returns core::DOMAIN:
	{core::DOMAIN}
	'DOMAIN'
	name=EString ':'
	'{'
		('code' ':' code=EString )?
		('data_type' ':' data_type=FACET_VALUE_TYPE )?
		('description' ':' description=EString )?
		('domain_id' ':' domain_id=EString )?
		('is_enumerated' ':' is_enumerated= EBoolean)?
		('is_reference' ':' is_reference= EBoolean)?
		('displayName' ':' displayName=EString )?
		('facet_id' ':' facet_id=[core::FACET_COLLECTION|EString] )?
		('maintenance_agency_id' ':' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';

ModuleDependency returns module_management::ModuleDependency:
	{module_management::ModuleDependency}
	'ModuleDependency' ':'
	'{'
		('moduleName' ':' moduleName=EString )?
		('moduleVersion' ':' moduleVersion=EString )?
		('theModule' ':' theModule=[module_management::Module|EString] )?
		('longName' ':' longName=[module_management::ModuleLongName|EString])?
	'}';

enum FACET_VALUE_TYPE returns core::FACET_VALUE_TYPE:
				BigInteger = ':BigInteger' | Boolean = ':Boolean' | DateTime = ':DateTime' | DayMonthDayMonth = ':DayMonthDayMonth' | Decimal = ':Decimal' | Double = ':Double' | Duration = ':Duration' | Float = ':Float' | GregorianDay = ':GregorianDay' | GregorianMonth = ':GregorianMonth' | GregorianYear = ':GregorianYear' | Integer = ':Integer' | Long = ':Long' | Short = ':Short' | String = ':String' | Time = ':Time' | URI = ':URI';

FACET_COLLECTION returns core::FACET_COLLECTION:
	{core::FACET_COLLECTION}
	'FACET_COLLECTION'
	facet_id=EString ':'
	'{'
		('code' ':' code=EString )?
		('facet_value_type' ':' facet_value_type=FACET_VALUE_TYPE )?
		('name' ':' name=EString )?
		('maintenance_agency_id' ':' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

MAINTENANCE_AGENCY returns core::MAINTENANCE_AGENCY:
	{core::MAINTENANCE_AGENCY}
	'MAINTENANCE_AGENCY'
	name=EString ':'
	'{'
		('code' ':' code=EString )?
		('maintenance_agency_id' ':' maintenance_agency_id=EString)?
	'}';

MEMBER returns core::MEMBER:
	{core::MEMBER}
	'MEMBER'
	name=EString ':'
	'{'
		('code' ':' code=EString )?
		('description' ':' description=EString )?
		('member_id' ':' member_id=EString )?
		('displayName' ':' displayName=EString )?
		('domain_id' ':' domain_id=[core::DOMAIN|EString] )?
		('maintenance_agency_id' ':' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';

VARIABLE returns core::VARIABLE:
	{core::VARIABLE}
	'VARIABLE'
	name=EString ':'
	'{'
		('code' ':' code=EString )?
		('description' ':' description=EString )?
		('primary_concept' ':' primary_concept=EString )?
		('variable_id' ':' variable_id=EString )?
		('displayName' ':' displayName=EString )?
		('domain_id' ':' domain_id=[core::DOMAIN|EString] )?
		('maintenance_agency_id' ':' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';

CUBE returns data_definition::CUBE:
	{data_definition::CUBE}	
	'CUBE'
	name=EString ':'
	'{'
		('code' ':' code=EString )?
		('cube_id' ':' cube_id=EString )?
		('cube_type' ':' cube_type=EString )?
		('description' ':' description=EString )?
		('is_allowed' ':' is_allowed= EBoolean )?
		('published' ':' published= EBoolean )?	
		('valid_from' ':' valid_from=EDate )?
		('valid_to' ':' valid_to=EDate )?
		('version' ':' version=EString )?
		('displayName' ':' displayName=EString )?
		('cube_structure_id' ':' cube_structure_id=[data_definition::CUBE_STRUCTURE|EString] )?
		('framework_id' ':' framework_id=[data_definition::FRAMEWORK|EString] )?
		('maintenance_agency_id' ':' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';

CUBE_STRUCTURE returns data_definition::CUBE_STRUCTURE:
	{data_definition::CUBE_STRUCTURE}
	'CUBE_STRUCTURE'
	name=EString ':'
	'{'
		('code' ':' code=EString )?
		('cube_structure_id' ':' cube_structure_id=EString )?
		('description' ':' description=EString )?
		('valid_from' ':' valid_from=EDate )?
		('valid_to' ':' valid_to=EDate )?
		('version' ':' version=EString )?
		('displayName' ':' displayName=EString )?
		('maintenance_agency_id' ':' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';

CUBE_STRUCTURE_ITEM returns data_definition::CUBE_STRUCTURE_ITEM:
	{data_definition::CUBE_STRUCTURE_ITEM}	
	'CUBE_STRUCTURE_ITEM' ':'
	'{'
		('description' ':' description=EString )?
		('dimension_type' ':' dimension_type=TYP_DMNSN )?
		('is_flow' ':' is_flow=EBoolean )?
		('is_mandatory' ':' is_mandatory=EBoolean )?
		('order' ':' order=EInt )?
		('role' ':' role=TYP_RL )?
		('isIdentifier' ':' isIdentifier?=EBoolean )?
		('cube_variable_code' ':' cube_variable_code=EString )?
		('attribute_associated_variable' ':' attribute_associated_variable=[core::VARIABLE|EString] )?
		('cube_structure_id' ':' cube_structure_id=[data_definition::CUBE_STRUCTURE|EString] )?
		('member_id' ':' member_id=[core::MEMBER|EString] )?
		('subdomain_id' ':' subdomain_id=[core::SUBDOMAIN|EString] )?
		('variable_id' ':' variable_id=[core::VARIABLE|EString] )?
		('variable_set_id' ':' variable_set_id=[core::VARIABLE_SET|EString])?
	'}';

FRAMEWORK returns data_definition::FRAMEWORK:
	{data_definition::FRAMEWORK}
	'FRAMEWORK'
	framework_id=EString ':'
	'{'
		('code' ':' code=EString )?
		('description' ':' description=EString )?
		('name' ':' name=EString )?
		('maintenance_agency_id' ':' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';



enum TYP_DMNSN returns data_definition::TYP_DMNSN:
			B = ':B' | M = ':M' | T = ':T' | U = ':U';

EInt returns ecore::EInt:
	'-'? INT;

CompareAttributeLineageModels returns platform_call::CompareAttributeLineageModels:
	{platform_call::CompareAttributeLineageModels}
	'CompareAttributeLineageModels'
	name=EString ':'
	'{'
		('errorMessage' ':' errorMessage=EString)?
		('returnStatus' ':' returnStatus=EInt)?
		('firstModel' ':' firstModel=[attribute_lineage::AttributeLineageModel|EString])?
		('secondModel' ':' secondModel=[attribute_lineage::AttributeLineageModel|EString])?
		('resultingModel' ':' resultingModel=AttributeLineageModel)?
		('subsetBoolean' ':' subsetBoolean=SubsetBoolean)?
		('notIncludedModel' ':' notIncludedModel=AttributeLineageModel)?
	'}';
	
SubsetBoolean returns attribute_lineage::SubsetBoolean:
	SubsetBoolean_Impl | IsNotSubset | IsSubset;
	
IsNotSubset returns attribute_lineage::IsNotSubset:
	{attribute_lineage::IsNotSubset}
	'IsNotSubset'
	;

IsSubset returns attribute_lineage::IsSubset:
	{attribute_lineage::IsSubset}
	'IsSubset'
	;
		
SubsetBoolean_Impl returns attribute_lineage::SubsetBoolean:
	{attribute_lineage::SubsetBoolean}
	'SubsetBoolean'
	;
	
enum TYP_RL returns data_definition::TYP_RL:
				O = ':O' | A = ':A' | D = ':D';

SUBDOMAIN returns core::SUBDOMAIN:
	{core::SUBDOMAIN}
	'SUBDOMAIN'
	subdomain_id=EString ':'
	'{'
		('code' ':' code=EString )?
		('description' ':' description=EString )?
		('name' ':' name=EString )?
		('domain_id' ':' domain_id=[core::DOMAIN|EString] )?
		('facet_id' ':' facet_id=[core::FACET_COLLECTION|EString] )?
		('maintenance_agency_id' ':' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString] )?
		('is_listed' ':' is_listed=EBoolean )?
		('is_natural' ':' is_natural=EBoolean)?
	'}';

VARIABLE_SET returns core::VARIABLE_SET:
	{core::VARIABLE_SET}
	'VARIABLE_SET'
	variable_set_id=EString ':'
	'{'
		('code' ':' code=EString )?
		('description' ':' description=EString )?
		('name' ':' name=EString )?
		('maintenance_agency_id' ':' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';

COMBINATION returns data_definition::COMBINATION:
	{data_definition::COMBINATION}
	'COMBINATION'
	name=EString ':'
	'{'
		('code' ':' code=EString )?
		('combination_id' ':' combination_id=EString )?
		('valid_from' ':' valid_from=EDate )?
		('valid_to' ':' valid_to=EDate )?
		('version' ':' version=EString )?
		('maintenance_agency_id' ':' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString] )?
		('combination_items' ':' '{' combination_items+=COMBINATION_ITEM ( "," combination_items+=COMBINATION_ITEM)* '}' )?
	'}';

COMBINATION_ITEM returns data_definition::COMBINATION_ITEM:
	{data_definition::COMBINATION_ITEM}
	'COMBINATION_ITEM' ':'
	'{'
		('member_id' ':' member_id=[core::MEMBER|EString] )?
		('subdomain_id' ':' subdomain_id=[core::SUBDOMAIN|EString] )?
		('variable_id' ':' variable_id=[core::VARIABLE|EString] )?
		('variable_set_id' ':' variable_set_id=[core::VARIABLE_SET|EString])?
	'}';

CUBE_TO_COMBINATION returns data_definition::CUBE_TO_COMBINATION:
	{data_definition::CUBE_TO_COMBINATION}
	'CUBE_TO_COMBINATION' ':'
	'{'
		('combination_id' ':' combination_id=[data_definition::COMBINATION|EString] )?
		('cube_id' ':' cube_id=[data_definition::CUBE|EString])?
	'}';

TRANSFORMATION_SCHEME returns vtl_transformation::TRANSFORMATION_SCHEME:
	{vtl_transformation::TRANSFORMATION_SCHEME}
	'TRANSFORMATION_SCHEME'
	name=EString ':'
	'{'
		('transformation_scheme_id' ':' transformation_scheme_id=EString )?
		('description' ':' description=EString )?
		('code' ':' code=EString )?
		('version' ':' version=EString )?
		('valid_to' ':' valid_to=EDate )?
		('valid_from' ':' valid_from=EDate )?
		('displayName' ':' displayName=EString)?
	'}';

MAPPING_DEFINITION returns mapping::MAPPING_DEFINITION:
	{mapping::MAPPING_DEFINITION}
	'MAPPING_DEFINITION'
	mapping_id=EString ':'
	'{'
		('name' ':' name=EString )?
		('code' ':' code=EString )?
		('maintenance_agency_id' ':' maintenance_agency_id=EString )?
		('mapping_type' ':' mapping_type=EString )?
		('memberMapping' ':' memberMapping=[mapping::MEMBER_MAPPING|EString] )?
		('variableMapping' ':' variableMapping=[mapping::VARIABLE_MAPPING|EString])?
	'}';

MEMBER_MAPPING returns mapping::MEMBER_MAPPING:
	{mapping::MEMBER_MAPPING}
	'MEMBER_MAPPING'
	member_mapping_id=EString ':'
	'{'
		('name' ':' name=EString )?
		('code' ':' code=EString )?
		('maintenance_agency_id' ':' maintenance_agency_id=EString )?
		('memberMappingItems' ':' '[' memberMappingItems+=MEMBER_MAPPING_ITEM ( "," memberMappingItems+=MEMBER_MAPPING_ITEM)* ']' )?
	'}';

VARIABLE_MAPPING returns mapping::VARIABLE_MAPPING:
	{mapping::VARIABLE_MAPPING}
	'VARIABLE_MAPPING'
	variable_mapping_id=EString ':'
	'{'
		('name' ':' name=EString )?
		('code' ':' code=EString )?
		('maintenance_agency_id' ':' maintenance_agency_id=EString )?
		('varaibleMappingItems' ':' '[' varaibleMappingItems+=VARIABLE_MAPPING_ITEM ( "," varaibleMappingItems+=VARIABLE_MAPPING_ITEM)* ']' )?
	'}';

MEMBER_MAPPING_ITEM returns mapping::MEMBER_MAPPING_ITEM:
	{mapping::MEMBER_MAPPING_ITEM}
	'MEMBER_MAPPING_ITEM' ':'
	'{'
		('isSource' ':' isSource=EString )?
		('member' ':' member=[core::MEMBER|EString] )?
		('variable' ':' variable=[core::VARIABLE|EString])?
	'}';

VARIABLE_MAPPING_ITEM returns mapping::VARIABLE_MAPPING_ITEM:
	{mapping::VARIABLE_MAPPING_ITEM}
	'VARIABLE_MAPPING_ITEM' ':'
	'{'
		('isSource' ':' isSource=EString )?
		('variable' ':' variable=[core::VARIABLE|EString])?
	'}';

TitledRequirementsSection returns requirements_text::TitledRequirementsSection:
	'TitledRequirementsSection'
	name=EString ':'
	'{'
		('title' title=EString )?
		('referencingSections' ':' referencingSections=[requirements_text::RequirementsSectionLinkWithText|EString] )?
		'requirementsType'  ':'requirementsType=[requirements_text::RequirementType|EString]
		('sections' ':' '[' sections+=RequirementsSection ( "," sections+=RequirementsSection)* ']' )?
	'}';

AllowedTypes returns requirements_text::AllowedTypes:
	{requirements_text::AllowedTypes}
	'AllowedTypes' ':'
	'{'
		('allowedTypes' ':' '[' allowedTypes+=RequirementType ( "," allowedTypes+=RequirementType)* ']' )?
	'}';

RequirementsSectionLinkWithText returns requirements_text::RequirementsSectionLinkWithText:
	{requirements_text::RequirementsSectionLinkWithText}
	'RequirementsSectionLinkWithText'
	name=EString ':'
	'{'
		('linkText' ':' linkText=EString )?
		('subsection' ':' subsection=EString )?
		('linkedRuleSection' ':' linkedRuleSection=[requirements_text::TitledRequirementsSection|EString])?
	'}';

RequirementType returns requirements_text::RequirementType:
	{requirements_text::RequirementType}
	'RequirementType'
	name=EString; 

RequirementsSectionImage returns requirements_text::RequirementsSectionImage:
	{requirements_text::RequirementsSectionImage}
	'RequirementsSectionImage'
	name=EString ':'
	'{'
		('style' ':' style=EString )?
		('uri' ':' uri=EString)?
	'}';

RequirementsSectionText returns requirements_text::RequirementsSectionText:
	{requirements_text::RequirementsSectionText}
	'RequirementsSectionText'
	name=EString ':'
	'{'
		('text' ':' text=EString)?
	'}';

TestDefinition_Impl returns test_definition::TestDefinition:
	{test_definition::TestDefinition}
	'TestDefinition'
	name=EString ':'
	'{'
		('testContraints' ':' testContraints=[test_definition::TestContraints|EString])?
		('given' ':' given=Given )?
		('when' ':' when=When )?
		('then' ':' then=Then )?
	'}';

Given returns test_definition::Given:
	{test_definition::Given}
	'Given' ':'
	'{'
		('text' ':' text=[test_definition::ClauseText|EString] )?
		('regulatoryTextLinks' ':' '[' regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|EString] ( "," regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|EString])* ']'  )?
		('params' ':' '[' params+=Param ( "," params+=Param)* ']' )?
	'}';

When returns test_definition::When:
	{test_definition::When}
	'When' ':'
	'{'
		('text' ':' text=[test_definition::ClauseText|EString] )?
		('regulatoryTextLinks' ':' '[' regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|EString] ( "," regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|EString])* ']'  )?
		('params' ':' '[' params+=Param ( "," params+=Param)* ']' )?
	'}';

Then returns test_definition::Then:
	{test_definition::Then}
	'Then' ':'
	'{'
		('text' ':' text=[test_definition::ClauseText|EString] )?
		('regulatoryTextLinks' ':' '(' regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|EString] ( "," regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|EString])* ']'  )?
		('params' ':' '[' params+=Param ( "," params+=Param)* ']' )?
	'}';

E2ETestDefinition returns test_definition::E2ETestDefinition:
	{test_definition::E2ETestDefinition}
	'E2ETestDefinition'
	name=EString ':'
	'{'
		('testContraints' ':' testContraints=[test_definition::TestContraints|EString] )?
		('given' ':' given=Given )?
		('when' ':' when=When )?
		('then' ':' then=Then)?
	'}';

UnitTestDefinition returns test_definition::UnitTestDefinition:
	{test_definition::UnitTestDefinition}
	'UnitTestDefinition'
	name=EString ':'
	'{'
		('testContraints' ':' testContraints=[test_definition::TestContraints|EString] )?
		('given' ':' given=Given )?
		('when' ':' when=When )?
		('then' ':' then=Then)?
	'}';

ClauseText returns test_definition::ClauseText:
	{test_definition::ClauseText}
	'ClauseText'
	name=EString;

Param returns test_definition::Param:
	{test_definition::Param}
	'Param' ':'
	'{'
		('param' ':' param=[ecore::EObject|EString])?
	'}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

SMCubesTest returns cocamo::SMCubesTest:
	{cocamo::SMCubesTest}
	'SMCubesTest'
	name=EString ':'
	'{'
		('testDefinition' ':' testDefinition=[test_definition::E2ETestDefinition|EString] )?
		('expectedResults' ':' expectedResults=[cocamo::SMCubesReportResults|EString] )?
		('inputData' ':' inputData=SMCubesTestInputData)?
	'}';

SMCubesTestInputData returns cocamo::SMCubesTestInputData:
	{cocamo::SMCubesTestInputData}
	'SMCubesTestInputData'
	name=EString ':'
	'{'
		('smcubes_inputdata' ':' '[' smcubes_inputdata+=BaseColumnStructuredData ( "," smcubes_inputdata+=BaseColumnStructuredData)* ']' )?
	'}';

SMCubesReportResults returns cocamo::SMCubesReportResults:
	{cocamo::SMCubesReportResults}
	'SMCubesReportResults' ':'
	'{'
		('reportCells' ':' '[' reportCells+=ReportCellValue ( "," reportCells+=ReportCellValue)* ']' )?
	'}';

BaseColumnStructuredData returns base_column_structured_data::BaseColumnStructuredData:
	{base_column_structured_data::BaseColumnStructuredData}
	'BaseColumnStructuredData'
	name=EString ':'
	'{'
		('cube' ':' cube=[data_definition::CUBE|EString] )?
		('rows' ':' '[' rows+=BaseRowData ( "," rows+=BaseRowData)* ']' )?
	'}';

BaseRowData returns base_column_structured_data::BaseRowData:
	{base_column_structured_data::BaseRowData}
	'BaseRowData'
	rowID=EString ':'
	'{'
		('cells' ':' '[' cells+=BaseCell ( "," cells+=BaseCell)* ']' )?
	'}';

BaseCellWithEnumeratedValue returns base_column_structured_data::BaseCellWithEnumeratedValue:
	{base_column_structured_data::BaseCellWithEnumeratedValue}
	'BaseCellWithEnumeratedValue'
	cellID=EString ':'
	'{'
		('column' ':' column=[core::VARIABLE|EString] )?
		('value' ':' value=[core::MEMBER|EString])?
	'}';

BaseCellWithValue returns base_column_structured_data::BaseCellWithValue:
	{base_column_structured_data::BaseCellWithValue}
	'BaseCellWithValue'
	cellID=EString ':'
	'{'
		('value' ':' value=EString )?
		('column' ':' column=[core::VARIABLE|EString])?
	'}';

ReportCellValue returns reports::ReportCellValue:
	{reports::ReportCellValue}
	'ReportCellValue' ':'
	'{'
		('reportCell' ':' reportCell=[reports::ReportCell|EString])?
	'}';

ReportCell returns reports::ReportCell:
	{reports::ReportCell}
	'ReportCell'
	name=EString ':'
	'{'
		('combination' ':' combination=[data_definition::COMBINATION|EString])?
	'}';

TestTemplate returns test_definition::TestTemplate:
	{test_definition::TestTemplate}
	'TestTemplate'
	name=EString ':'
	'{'
		('givenText' ':' givenText=ClauseText )?
		('whenText' ':' whenText=ClauseText )?
		('thenText' ':' thenText=ClauseText )?
		('givenParams' ':' '{' givenParams+=Param ( "," givenParams+=Param)* '}'  )?
		('whenParams' ':' '{' whenParams+=Param ( "," whenParams+=Param)* '}'  )?
		('thenParams' ':' '{' thenParams+=Param ( "," thenParams+=Param)* '}' )?
	'}';

Scenario returns scenarios::Scenario:
	{scenarios::Scenario}
	'Scenario'
	name=EString;

ScenarioSet returns scenarios::ScenarioSet:
	{scenarios::ScenarioSet}
	'ScenarioSet'
	name=EString ':'
	'{'
		('scenarios' ':' '[' scenarios+=Scenario ( "," scenarios+=Scenario)* ']' )?
	'}';

DataProcessingFunctionalityModule returns functionality_module::DataProcessingFunctionalityModule:
	{functionality_module::DataProcessingFunctionalityModule}
	'DataProcessingFunctionalityModule'
	name=EString ':'
	'{'
		('usedTransformationOrScheme' ':' usedTransformationOrScheme=[functionality_module::FunctionalityModule|EString] )?
		('scenario' ':' scenario=[scenarios::Scenario|EString] )?
		('scenarioSet' ':' scenarioSet=ScenarioSet)?
	'}';

LeafFunctionalityModule_Impl returns functionality_module::LeafFunctionalityModule:
	{functionality_module::LeafFunctionalityModule}
	'LeafFunctionalityModule'
	name=EString ':'
	'{'
		('usedTransformationOrScheme' ':' usedTransformationOrScheme=[functionality_module::FunctionalityModule|EString] )?
		('scenario' ':' scenario=[scenarios::Scenario|EString] )?
		('scenarioSet' ':' scenarioSet=ScenarioSet)?
	'}';

ParallelFunctionalityModule returns functionality_module::ParallelFunctionalityModule:
	{functionality_module::ParallelFunctionalityModule}
	'ParallelFunctionalityModule'
	name=EString ':'
	'{'
		('usedTransformationOrScheme' ':' usedTransformationOrScheme=[functionality_module::FunctionalityModule|EString] )?
		('scenario' ':' scenario=[scenarios::Scenario|EString] )?
		('scenarioSet' ':' scenarioSet=ScenarioSet )?
		('subTransformationsAndSchemes' ':' '[' subTransformationsAndSchemes+=FunctionalityModule ( "," subTransformationsAndSchemes+=FunctionalityModule)* ']' )?
	'}';

ScenarioSetFunctionalityModule returns functionality_module::ScenarioSetFunctionalityModule:
	{functionality_module::ScenarioSetFunctionalityModule}
	'ScenarioSetFunctionalityModule'
	name=EString ':'
	'{'
		('usedTransformationOrScheme' ':' usedTransformationOrScheme=[functionality_module::FunctionalityModule|EString] )?
		('scenario' ':' scenario=[scenarios::Scenario|EString] )?
		('scenarioSet' ':' scenarioSet=ScenarioSet )?
		('subTransformationsAndSchemes' ':' '[' subTransformationsAndSchemes+=FunctionalityModule ( "," subTransformationsAndSchemes+=FunctionalityModule)* ']' )?
		('scenarioSetChoice' ':' scenarioSetChoice=ScenarioSet)?
	'}';

SerialFunctionalityModule returns functionality_module::SerialFunctionalityModule:
	{functionality_module::SerialFunctionalityModule}
	'SerialFunctionalityModule'
	name=EString ':'
	'{'
		('usedTransformationOrScheme' ':' usedTransformationOrScheme=[functionality_module::FunctionalityModule|EString] )?
		('scenario' ':' scenario=[scenarios::Scenario|EString] )?
		('scenarioSet' ':' scenarioSet=ScenarioSet )?
		('subTransformationsAndSchemes' ':' '[' subTransformationsAndSchemes+=FunctionalityModule ( "," subTransformationsAndSchemes+=FunctionalityModule)* ']' )?
	'}';

FunctionalityModuleSet_Impl returns functionality_module::FunctionalityModuleSet:
	{functionality_module::FunctionalityModuleSet}
	'FunctionalityModuleSet'
	name=EString ':'
	'{'
		('usedTransformationOrScheme' ':' usedTransformationOrScheme=[functionality_module::FunctionalityModule|EString] )?
		('scenario' ':' scenario=[scenarios::Scenario|EString] )?
		('scenarioSet' ':' scenarioSet=ScenarioSet )?
		('subTransformationsAndSchemes' ':' '[' subTransformationsAndSchemes+=FunctionalityModule ( "," subTransformationsAndSchemes+=FunctionalityModule)* ']' )?
	'}';

ReadDataSourceFunctionalityModule returns functionality_module::ReadDataSourceFunctionalityModule:
	{functionality_module::ReadDataSourceFunctionalityModule}
	'ReadDataSourceFunctionalityModule'
	name=EString ':'
	'{'
		('usedTransformationOrScheme' ':' usedTransformationOrScheme=[functionality_module::FunctionalityModule|EString] )?
		('scenario' ':' scenario=[scenarios::Scenario|EString] )?
		('scenarioSet' ':' scenarioSet=ScenarioSet)?
	'}';

ReportCellCreationFunctionalityModule returns functionality_module::ReportCellCreationFunctionalityModule:
	{functionality_module::ReportCellCreationFunctionalityModule}
	'ReportCellCreationFunctionalityModule'
	name=EString ':'
	'{'
		('usedTransformationOrScheme' ':' usedTransformationOrScheme=[functionality_module::FunctionalityModule|EString] )?
		('scenario' ':' scenario=[scenarios::Scenario|EString] )?
		('scenarioSet' ':' scenarioSet=ScenarioSet)?
	'}';

ValidationFunctionalityModule returns functionality_module::ValidationFunctionalityModule:
	{functionality_module::ValidationFunctionalityModule}
	'ValidationFunctionalityModule'
	name=EString ':'
	'{'
		('usedTransformationOrScheme' ':' usedTransformationOrScheme=[functionality_module::FunctionalityModule|EString] )?
		('scenario' ':' scenario=[scenarios::Scenario|EString] )?
		('scenarioSet' ':' scenarioSet=ScenarioSet)?
	'}';

PlatformCall_Impl returns platform_call::PlatformCall:
	{platform_call::PlatformCall}
	'PlatformCall'
	name=EString ':'
	'{'
		('errorMessage' ':' errorMessage=EString )?
		('returnStatus' ':' returnStatus=EInt)?
	'}';

TranslateBIRDWithOldTestFormatToCocason returns platform_call::TranslateBIRDWithOldTestFormatToCocason:
	{platform_call::TranslateBIRDWithOldTestFormatToCocason}
	'TranslateBIRDWithOldTestFormatToCocason'
	name=EString ':'
	'{'
		('errorMessage' ':' errorMessage=EString )?
		('returnStatus' ':' returnStatus=EInt )?
		('inputDirectory' ':' inputDirectory=EString )?
		('outputDirectory' ':' outputDirectory=EString )?
		('testDirectory' ':' testDirectory=EString)?
	'}';

ConvertSQLDeveloperModelToEcore returns platform_call::ConvertSQLDeveloperModelToEcore:
	{platform_call::ConvertSQLDeveloperModelToEcore}
	'ConvertSQLDeveloperModelToEcore'
	name=EString ':'
	'{'
		('errorMessage' ':' errorMessage=EString )?
		('returnStatus' ':' returnStatus=EInt )?
		('inputDirectory' ':' inputDirectory=EString)?
	'}';

TranslateBIRDWithNewTestFormatToCocason returns platform_call::TranslateBIRDWithNewTestFormatToCocason:
	{platform_call::TranslateBIRDWithNewTestFormatToCocason}
	'TranslateBIRDWithNewTestFormatToCocason'
	name=EString ':'
	'{'
		('errorMessage' ':' errorMessage=EString )?
		('returnStatus' ':' returnStatus=EInt )?
		('inputDirectory' ':' inputDirectory=EString )?
		('outputDirectory' ':' outputDirectory=EString )?
		('testDirectory' ':' testDirectory=EString)?
	'}';

CreateAttributeLineageModel returns platform_call::CreateAttributeLineageModel:
	{platform_call::CreateAttributeLineageModel}
	'CreateAttributeLineageModel'
	name=EString ':'
	'{'
		('errorMessage' ':' errorMessage=EString)?
		('returnStatus' ':' returnStatus=EInt)?
		('executableLogic' ':' executableLogic=[transformation::TRLExecutableLogic|EString])?
		('unresolvedCubeColumnParams' ':' '[' unresolvedCubeColumnParams+=[column_transformation_logic::SpeculativeCubeColumnParameter|EString] ( "," unresolvedCubeColumnParams+=[column_transformation_logic::SpeculativeCubeColumnParameter|EString])* ']' )?
		('resultingALM' ':' resultingALM=AttributeLineageModel)?
	'}';


AttributeLineageModel returns attribute_lineage::AttributeLineageModel:
	{attribute_lineage::AttributeLineageModel}
	'AttributeLineageModel'
	name=EString ':'
	'{'
		('rowTransformations' ':' '{' rowTransformations+=CubeTransformationLogic ( "," rowTransformations+=CubeTransformationLogic)* '}'  )?
		('baseSchemas' ':' '{' baseSchemas+=BaseRowStructure ( "," baseSchemas+=BaseRowStructure)* '}'  )?
		('specialFunctionSpecs' ':' '{' specialFunctionSpecs+=FunctionSpec ( "," specialFunctionSpecs+=FunctionSpec)* '}' )?
	'}';

CubeTransformationLogic returns cube_transformation_logic::CubeTransformationLogic:
	{cube_transformation_logic::CubeTransformationLogic}
	'CubeTransformationLogic' ':'
	'{'
		('columnFunctionGroup' ':' columnFunctionGroup=ColumnFunctionGroup )?
		('rowCreationApproachForCube' ':' rowCreationApproachForCube=RowCreationApproachForCube )?
		('usedInSubsets' ':' usedInSubsets=EBoolean)?
	'}';

BaseRowStructure returns row_transformation_logic::BaseRowStructure:
	{row_transformation_logic::BaseRowStructure}	
	'BaseRowStructure' ':'
	'{'
		('cube' ':' cube=[cubes::BaseCube|EString] )?
		('columns' ':' '[' columns+=CubeColumn ( "," columns+=CubeColumn)* ']' )?
		('usedInSubsets' ':' usedInSubsets=EBoolean)?
	'}';

FunctionSpec_Impl returns functions::FunctionSpec:
	{functions::FunctionSpec}
	'FunctionSpec'
	name=EString ':'
	'{'
		('functionalName' ':' functionalName=EString )?
		('sqlName' ':' sqlName=EString )?
		('parameterSpecs' ':' '[' parameterSpecs+=ParamaterSpec ( "," parameterSpecs+=ParamaterSpec)* ']' )?
	'}';

ColumnFunctionGroup returns column_transformation_logic::ColumnFunctionGroup:
	{column_transformation_logic::ColumnFunctionGroup}
	'ColumnFunctionGroup' ':'
	'{'
		('columnFunctions' ':' '[' columnFunctions+=ColumnFunction ( "," columnFunctions+=ColumnFunction)* ']' )?
	'}';

RowCreationApproachForCube returns row_transformation_logic::RowCreationApproachForCube:
	{row_transformation_logic::RowCreationApproachForCube}
	'RowCreationApproachForCube'
	name=EString ':'
	'{'
		('cube' ':' cube=[cubes::FreeBirdToolsCube|EString] )?
		('rowCreationApproach' ':' rowCreationApproach=RowCreationApproach)?
	'}';

ColumnFunction_Impl returns column_transformation_logic::ColumnFunction:
	{column_transformation_logic::ColumnFunction}	
	'ColumnFunction'
	name=EString ':'
	'{'
		('cube' ':' cube=[cubes::FreeBirdToolsCube|EString] )?
		('variable' ':' variable=[core::VARIABLE|EString] )?
		('usedInSubsets' ':' usedInSubsets=EBoolean)?
	'}';

FreeBirdToolsCube_Impl returns cubes::FreeBirdToolsCube:
	{cubes::FreeBirdToolsCube}
	'FreeBirdToolsCube'
	name=EString;

AggregateColumnFunction returns column_transformation_logic::AggregateColumnFunction:
	{column_transformation_logic::AggregateColumnFunction}	
	'AggregateColumnFunction'
	name=EString ':'
	'{'
		('cube' ':' cube=[cubes::FreeBirdToolsCube|EString] )?
		('variable' ':' variable=[core::VARIABLE|EString] )?
		('aggregateFunction' ':' aggregateFunction=AggregateFunction )?
		('usedInSubsets' ':' usedInSubsets=EBoolean)?
	'}';

BasicColumnFunction returns column_transformation_logic::BasicColumnFunction:
	{column_transformation_logic::BasicColumnFunction}
	
	'BasicColumnFunction'
	name=EString ':'
	'{'
		('cube' ':' cube=[cubes::FreeBirdToolsCube|EString] )?
		('variable' ':' variable=[core::VARIABLE|EString] )?
		('basicFunction' ':' basicFunction=BasicFunction )?
		('usedInSubsets' ':' usedInSubsets=EBoolean)?
	'}';



DerivedCube_Impl returns cubes::DerivedCube:
	{cubes::DerivedCube}
	'DerivedCube'
	name=EString ':'
	'{'
		('sourceCubes' ':' '[' sourceCubes+=[cubes::FreeBirdToolsCube|EString] ( "," sourceCubes+=[cubes::FreeBirdToolsCube|EString])* ']' )?
	'}';

TargetCube returns cubes::TargetCube:
	{cubes::TargetCube}
	'TargetCube'
	name=EString ':'
	'{'
		('sourceCubes' ':' '[' sourceCubes+=[cubes::FreeBirdToolsCube|EString] ( "," sourceCubes+=[cubes::FreeBirdToolsCube|EString])* ']' )?
	'}';

AggregateFunction returns functions::AggregateFunction:
	{functions::AggregateFunction}
	'AggregateFunction'
	name=EString ':'
	'{'
		('functionSpec' ':' functionSpec=[functions::AggregateFunctionSpec|EString] )?
		('parameters' ':' '[' parameters+=Parameter ( "," parameters+=Parameter)* ']' )?
	'}';

Parameter_Impl returns functions::Parameter:
	{functions::Parameter}
	'Parameter'
	;

AggregateFunctionSpec returns functions::AggregateFunctionSpec:
	{functions::AggregateFunctionSpec}
	'AggregateFunctionSpec'
	name=EString ':'
	'{'
		('functionalName' ':' functionalName=EString )?
		('sqlName' ':' sqlName=EString )?
		('parameterSpecs' '[' parameterSpecs+=ParamaterSpec ( "," parameterSpecs+=ParamaterSpec)* ']' )?
	'}';

BasicFunction_Impl returns functions::BasicFunction:
	{functions::BasicFunction}
	'BasicFunction'
	name=EString ':'
	'{'
		('functionSpec' ':' functionSpec=[functions::BasicFunctionSpec|EString] )?
		('parameters' ':' '[' parameters+=Parameter ( "," parameters+=Parameter)* ']' )?
	'}';

BooleanFunction returns functions::BooleanFunction:
	{functions::BooleanFunction}
	'BooleanFunction'
	name=EString ':'
	'{'
		('functionSpec' ':' functionSpec=[functions::BasicFunctionSpec|EString] )?
		('parameters' ':' '[' parameters+=Parameter ( "," parameters+=Parameter)* ']' )?
	'}';

Function_Impl returns functions::Function:
	{functions::Function}
	'Function'
	name=EString ':'
	'{'
		('parameters' ':' '[' parameters+=Parameter ( "," parameters+=Parameter)* ']' )?
	'}';

BasicFunctionSpec returns functions::BasicFunctionSpec:
	{functions::BasicFunctionSpec}
	(isInfix?='isInfix')?
	'BasicFunctionSpec'
	name=EString ':'
	'{'
		('functionalName' ':' functionalName=EString )?
		('sqlName' ':' sqlName=EString )?
		('parameterSpecs' ':' '[' parameterSpecs+=ParamaterSpec ( "," parameterSpecs+=ParamaterSpec)* ']' )?
		('isInfix' ':' isInfix=EBoolean)?
	'}';

ParamaterSpec returns functions::ParamaterSpec:
	{functions::ParamaterSpec}
	'ParamaterSpec'
	name=EString;

RowCreationApproach_Impl returns row_transformation_logic::RowCreationApproach:
	{row_transformation_logic::RowCreationApproach}
	'RowCreationApproach' ':'
	'{'
		('dependantCubeColumns' ':' '[' dependantCubeColumns+=ResolvedCubeColumnParameter ( "," dependantCubeColumns+=ResolvedCubeColumnParameter)* ']'  )?
		('createdCubeColumns' ':' '[' createdCubeColumns+=CubeColumn ( "," createdCubeColumns+=CubeColumn)* ']' )?
		('dependantStructItemColumns' ':' '[' dependantStructItemColumns+=ResolvedStructColumnParameter ( "," dependantStructItemColumns+=ResolvedStructColumnParameter)* ']' )?
	'}';

ResolvedCubeColumnParameter returns column_transformation_logic::ResolvedCubeColumnParameter:
	{column_transformation_logic::ResolvedCubeColumnParameter}
	'ResolvedCubeColumnParameter' ':'
	'{'
		('cubeColumn' ':' cubeColumn=[column_transformation_logic::CubeColumn|EString])?
	'}';

CubeColumn_Impl returns column_transformation_logic::CubeColumn:
	{column_transformation_logic::CubeColumn}	
	'CubeColumn'
	name=EString ':'
	'{'
		('cube' ':' cube=[cubes::FreeBirdToolsCube|EString] )?
		('variable' ':' variable=[core::VARIABLE|EString] )?
		('usedInSubsets' ':' usedInSubsets=EBoolean)?
	'}';

CustomRowCreationApproach returns row_transformation_logic::CustomRowCreationApproach:
	{row_transformation_logic::CustomRowCreationApproach}
	'CustomRowCreationApproach' ':'
	'{'
		('dependantVariables' ':' '[' dependantVariables+=[core::VARIABLE|EString] ( "," dependantVariables+=[core::VARIABLE|EString])* ']' )?
		('dependantCubeColumns' ':' '[' dependantCubeColumns+=ResolvedCubeColumnParameter ( "," dependantCubeColumns+=ResolvedCubeColumnParameter)* ']' )?
		('createdCubeColumns' ':' '[' createdCubeColumns+=CubeColumn ( "," createdCubeColumns+=CubeColumn)* ']' )?
		('dependantStructItemColumns' ':' '[' dependantStructItemColumns+=ResolvedStructColumnParameter ( "," dependantStructItemColumns+=ResolvedStructColumnParameter)* ']' )?
	'}';
	
ExplodeArrayOfStructsRowFunction returns advanced_row_transformation_logic::ExplodeArrayOfStructsRowFunction:
	{advanced_row_transformation_logic::ExplodeArrayOfStructsRowFunction}
	'ExplodeArrayOfStructsRowFunction' ':'
	'{'
		('dependantCubeColumns' ':' '[' dependantCubeColumns+=ResolvedCubeColumnParameter ( "," dependantCubeColumns+=ResolvedCubeColumnParameter)* ']' )?
		('createdCubeColumns' ':' '[' createdCubeColumns+=CubeColumn ( "," createdCubeColumns+=CubeColumn)* ']' )?
		('dependantStructItemColumns' ':' '[' dependantStructItemColumns+=ResolvedStructColumnParameter ( "," dependantStructItemColumns+=ResolvedStructColumnParameter)* ']' )?
		('arraySourceVariable' ':' arraySourceVariable=[efbt_advanced_data_definition::ArrayTypedVariable|EString])?
	'}';


FilterAndGroupToOneRowCreationApproach returns row_transformation_logic::FilterAndGroupToOneRowCreationApproach:
	{row_transformation_logic::FilterAndGroupToOneRowCreationApproach}
	'FilterAndGroupToOneRowCreationApproach' ':'
	'{'
		('groupByVariables' ':' '[' groupByVariables+=[core::VARIABLE|EString] ( "," groupByVariables+=[core::VARIABLE|EString])* ']' )?
		('dependantCubeColumns' ':' '[' dependantCubeColumns+=ResolvedCubeColumnParameter ( "," dependantCubeColumns+=ResolvedCubeColumnParameter)* ']' )?
		('createdCubeColumns' ':' '[' createdCubeColumns+=CubeColumn ( "," createdCubeColumns+=CubeColumn)* ']'  )?
		('filterFunction' ':' filterFunction=BooleanFunction)?
		('dependantStructItemColumns' ':' '[' dependantStructItemColumns+=ResolvedStructColumnParameter ( "," dependantStructItemColumns+=ResolvedStructColumnParameter)* ']' )?
	'}';

OneToOneRowCreationApproach returns row_transformation_logic::OneToOneRowCreationApproach:
	{row_transformation_logic::OneToOneRowCreationApproach}
	'OneToOneRowCreationApproach' ':'
	'{'
		('dependantCubeColumns' ':' '[' dependantCubeColumns+=ResolvedCubeColumnParameter ( "," dependantCubeColumns+=ResolvedCubeColumnParameter)* ']'  )?
		('createdCubeColumns' ':' '[' createdCubeColumns+=CubeColumn ( "," createdCubeColumns+=CubeColumn)* ']' )?
		('dependantStructItemColumns' ':' '[' dependantStructItemColumns+=ResolvedStructColumnParameter ( "," dependantStructItemColumns+=ResolvedStructColumnParameter)* ']' )?
	'}';

FilterRowCreationApproach returns row_transformation_logic::FilterRowCreationApproach:
	{row_transformation_logic::FilterRowCreationApproach}
	'FilterRowCreationApproach' ':'
	'{'
		('dependantCubeColumns' ':' '[' dependantCubeColumns+=ResolvedCubeColumnParameter ( "," dependantCubeColumns+=ResolvedCubeColumnParameter)* ']'  )?
		('createdCubeColumns' ':' '[' createdCubeColumns+=CubeColumn ( "," createdCubeColumns+=CubeColumn)* ']'  )?
		('filterFunction' ':' filterFunction=BooleanFunction)?
		('dependantStructItemColumns' ':' '[' dependantStructItemColumns+=ResolvedStructColumnParameter ( "," dependantStructItemColumns+=ResolvedStructColumnParameter)* ']' )?
	'}';

GroupByRowCreationApproach returns row_transformation_logic::GroupByRowCreationApproach:
	{row_transformation_logic::GroupByRowCreationApproach}
	'GroupByRowCreationApproach' ':'
	'{'
		('groupByColumns' ':' '[' groupByColumns+=[core::VARIABLE|EString] ( "," groupByColumns+=[core::VARIABLE|EString])* ']'  )?
		('groupByCubeColumns' ':' '[' groupByCubeColumns+=[column_transformation_logic::CubeColumn|EString] ( "," groupByCubeColumns+=[column_transformation_logic::CubeColumn|EString])* ']'  )?
		('dependantCubeColumns' ':' '[' dependantCubeColumns+=ResolvedCubeColumnParameter ( "," dependantCubeColumns+=ResolvedCubeColumnParameter)* ']'  )?
		('createdCubeColumns' ':' '[' createdCubeColumns+=CubeColumn ( "," createdCubeColumns+=CubeColumn)* ']' )?
		('dependantStructItemColumns' ':' '[' dependantStructItemColumns+=ResolvedStructColumnParameter ( "," dependantStructItemColumns+=ResolvedStructColumnParameter)* ']' )?
	'}';

RowJoinFunction returns row_transformation_logic::RowJoinFunction:
	{row_transformation_logic::RowJoinFunction}
	'RowJoinFunction' ':'
	'{'
		('dependantCubeColumns' ':' '[' dependantCubeColumns+=ResolvedCubeColumnParameter ( "," dependantCubeColumns+=ResolvedCubeColumnParameter)* ']' )?
		('createdCubeColumns' ':' '[' createdCubeColumns+=CubeColumn ( "," createdCubeColumns+=CubeColumn)* ']' )?
		('joinFunction' ':' joinFunction=BooleanFunction)?
		('dependantStructItemColumns' ':' '[' dependantStructItemColumns+=ResolvedStructColumnParameter ( "," dependantStructItemColumns+=ResolvedStructColumnParameter)* ']' )?
	'}';

UnionRowCreationApproach returns row_transformation_logic::UnionRowCreationApproach:
	{row_transformation_logic::UnionRowCreationApproach}
	'UnionRowCreationApproach' ':'
	'{'
		('dependantCubeColumns' ':' '[' dependantCubeColumns+=ResolvedCubeColumnParameter ( "," dependantCubeColumns+=ResolvedCubeColumnParameter)* ']' )?
		('createdCubeColumns' ':' '[' createdCubeColumns+=CubeColumn ( "," createdCubeColumns+=CubeColumn)* ']' )?
		('dependantStructItemColumns' ':' '[' dependantStructItemColumns+=ResolvedStructColumnParameter ( "," dependantStructItemColumns+=ResolvedStructColumnParameter)* ']' )?
	'}';

ResolvedStructColumnParameter returns advanced_variable_lineagefunctions::ResolvedStructColumnParameter:
	{advanced_variable_lineagefunctions::ResolvedStructColumnParameter}
	'ResolvedStructColumnParameter' ':'
	'{'
		('columnInsideStruct' ':' columnInsideStruct=[core::VARIABLE|EString])?
		('cubeColumn' ':' cubeColumn=[column_transformation_logic::CubeColumn|EString])?
	'}';

ColumnStructuredData returns column_structured_data::ColumnStructuredData:
	{column_structured_data::ColumnStructuredData}
	'ColumnStructuredData'
	name=EString;



RowData returns column_structured_data::RowData:
	{column_structured_data::RowData}
	'RowData'
	rowID=EString;

	
	EDate returns ecore::EDate : INT '.' INT '.' INT;
	

